{
	"openapi": "3.0.1",
	"info": {
		"title": "newgraph-api-eu-prod",
		"version": "2025-01-16T16:16:47Z"
	},
	"servers": [
		{
			"url": "https://api.newgra.ph/{basePath}",
			"variables": {
				"basePath": {
					"default": "v1"
				}
			}
		}
	],
	"paths": {
		"/info-auth": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"lambdaAuthorizer": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-info-authorized/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/access/grant": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MoodGrantAccessRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodGrantAccessResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-grant-access/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-read/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"text/html": "#set ($context.responseOverride.header.Content-Type = \"text/html\")\n#set ($post = $util.parseJson($input.path(\"$.body\")))\n#set ($domain = \"os.newcoin.org\")\n#set ($cdn = \"cdn.newgra.ph\")\n\n#set ($url = \"https://${domain}/post/$post.id\")\n#set ($description = $util.escapeJavaScript($post.description))\n\n#if( $item.author.displayName == \"\" )\n#set ($author = $util.escapeJavaScript($post.author.username))\n#else\n#set ($author = $util.escapeJavaScript($post.author.displayName))\n#end\n\n#if( $post.title == \"\" )\n#set ($title = $author)\n#else\n#set ($title = $util.escapeJavaScript($post.title))\n#end\n\n#set ($image = \"https://${cdn}/images/$post.id/500x500/${post.contentUrl}\")\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n  <meta name=\"description\" content=\"$description\" />\n  <meta name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"$url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"$image\" />\n  <meta itemprop=\"description\" content=\"$description\" />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\" content=\"$image\" />\n  <meta property=\"og:title\" content=\"$title\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:description\" content=\"$description\" />\n  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"og:site_name\" content=\"${domain}\" />\n\n  <!-- Open Graph / Articles -->\n  <meta property=\"article:author\" content=\"$author\" />\n  <meta property=\"article:published_time\" content=\"$post.created\" />\n  <meta property=\"article:section\" content=\"$description\" />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"summary_large_image\">\n  <meta name=\"twitter:title\" content=\"$title\">\n  <meta name=\"twitter:description\" content=\"$description\">\n  <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\" content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"https://${domain}/favicon.svg\">\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}/favicon.png\">\n  <link rel=\"manifest\" href=\"https://${domain}/manifest.json\">\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}/favicon.png\">\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\n</head>\n<body>\n<!-- $post.id -->\n<script>\n  window.location = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n</body>\n</html>\n\n",
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"put": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PostUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-update/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PostCreateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostCreateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-create/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"delete": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NodeRequestPost"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OkResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-delete/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/activityManifest": {
			"get": {
				"parameters": [
					{
						"name": "since",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnyResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-activityManifest/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.since": "method.request.querystring.since"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/access/grantees": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodListGranteesResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-grantees-list/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/payment/stripe/checkoutSession": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StripeCheckoutSessionCreateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StripeCheckoutSessionCreateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-payment-eu-prod-stripe-checkout-create/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/userUpload/avatar": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserUploadRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userUpload-eu-prod-upload/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/callback/{path+}": {
			"get": {
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"content": {}
					},
					"400": {
						"description": "400 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws_proxy",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-connect-callback/invocations",
					"passthroughBehavior": "when_no_match"
				}
			},
			"options": {
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/payment/stripe/webhook": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PaymentStripeWebhookRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-payment-eu-prod-stripe-webhook/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/provider/{path+}": {
			"get": {
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"content": {}
					},
					"400": {
						"description": "400 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws_proxy",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-connect-request/invocations",
					"passthroughBehavior": "when_no_match"
				}
			},
			"options": {
				"parameters": [
					{
						"name": "path",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/payment/stripe/intent": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PaymentStripePaymentIntentCreateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaymentStripePaymentIntentCreateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-payment-eu-prod-stripe-intent-create/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/current": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPrivateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-current/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/moods": {
			"get": {
				"parameters": [
					{
						"name": "flags",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-moods-list/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.flags": "method.request.querystring.flags",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/invitees": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-connect-invitees/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/rated/out/users/requests": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedRatedResponseUser"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userRate-eu-prod-rated-out-users-request/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/evm/generateToken": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EvmVerificationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionTokenResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-evm-generateToken/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/access/subscribe": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MoodGrantAccessRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodGrantAccessResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-subscribe/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/rate": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RatingUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RatingUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-rate/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/attach/user": {
			"put": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityAttachRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-attach-user/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/info": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-info-read/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/list/search": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "q",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-list-search/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.q": "method.request.querystring.q",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/rated/in": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedRatedResponseUser"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userRate-eu-prod-rated-in/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/list/tags-search": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "q",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostTagsSearchPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-tags-search/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.q": "method.request.querystring.q",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/list/public": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-list-public/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/attachments": {
			"get": {
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sortBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "order",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodListAttachedResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-attached-list/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.sortBy": "method.request.querystring.sortBy",
						"integration.request.querystring.id": "method.request.querystring.id",
						"integration.request.querystring.order": "method.request.querystring.order"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/preupdate": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-preupdate/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/utils/remote-meta-proxy": {
			"get": {
				"parameters": [
					{
						"name": "url",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostRemoteMetaProxyResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-remote-meta-proxy/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.url": "method.request.querystring.url"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/invite": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserInviteRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserInvitationReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-invite/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/activation/address-badges/oracle": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-activation-eu-prod-holder-badges-oracle/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/estimate": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-connect-estimate-nts/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/getSpecialFolder": {
			"get": {
				"parameters": [
					{
						"name": "redirect",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "flag",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValueResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-special-folder/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.flag": "method.request.querystring.flag",
						"integration.request.querystring.redirect": "method.request.querystring.redirect",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/list/search": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "q",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-list-search/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.q": "method.request.querystring.q",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/invite/hash": {
			"get": {
				"parameters": [
					{
						"name": "hash",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserInvitationReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-resolveInviteHash/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.hash": "method.request.querystring.hash"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/activation/evm/checkBalance": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ChainAddressRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OkResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-activation-eu-prod-evm-balance/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/instagram": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InstagramVerificationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InstagramVerificationResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-insta-verify/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/rate": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RatingUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RatingUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-rate/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/report": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReportUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReportUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-report/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/searchexternal": {
			"get": {
				"parameters": [
					{
						"name": "username",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-search-external/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.id": "method.request.querystring.id",
						"integration.request.querystring.username": "method.request.querystring.username"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/payment/stripe/subscription/payment": {
			"post": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-payment-eu-prod-stripe-sub-payment/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/upload/node": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UploadRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-upload-eu-prod-upload-node/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/preregister": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserPreRegisterRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPrivateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-preregister/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/attach/post": {
			"put": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityAttachRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-attach-post/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/invitor": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserInvitationPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-invitorList/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/availability": {
			"get": {
				"parameters": [
					{
						"name": "username",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserAvailabilityResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-availability/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.username": "method.request.querystring.username"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user": {
			"get": {
				"parameters": [
					{
						"name": "username",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-read/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"text/html": "#set ($context.responseOverride.header.Content-Type = \"text/html\")\n#set ($user = $util.parseJson($input.path(\"$.body\")))\n#set ($domain = $stageVariables[\"domain\"])\n#set ($cdn = $stageVariables[\"cdn_domain\"])\n\n#set ($url = \"https://${domain}/user/$user.username\")\n#set ($description = $util.escapeJavaScript($user.description))\n\n#if( $item.author.displayName == \"\" )\n#set ($author = $util.escapeJavaScript($user.username))\n#else\n#set ($author = $util.escapeJavaScript($user.author.displayName))\n#end\n\n#set ($title = $author)\n\n#set ($image = \"https://${cdn}/images/$user.id/500x500/${user.contentUrl}\")\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n  <meta name=\"description\" content=\"$description\" />\n  <meta name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"$url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"$image\" />\n  <meta itemprop=\"description\" content=\"$description\" />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\" content=\"$image\" />\n  <meta property=\"og:title\" content=\"$title\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:description\" content=\"$description\" />\n  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"og:site_name\" content=\"${domain}}\" />\n\n  <!-- Open Graph / Articles -->\n  <meta property=\"article:author\" content=\"$author\" />\n  <meta property=\"article:published_time\" content=\"$user.created\" />\n  <meta property=\"article:section\" content=\"$description\" />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"summary\">\n  <meta name=\"twitter:title\" content=\"$title\">\n  <meta name=\"twitter:description\" content=\"$description\">\n  <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\" content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"https://${domain}}/favicon.svg\">\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}}/favicon.png\">\n  <link rel=\"manifest\" href=\"https://${domain}}/manifest.json\">\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}}/favicon.png\">\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\n</head>\n<body>\n<!-- $user.id -->\n<script>\n  window.location = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n</body>\n</html>\n\n",
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.id": "method.request.querystring.id",
						"integration.request.querystring.username": "method.request.querystring.username"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"put": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPrivateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-update/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCreateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPrivateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-create/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"delete": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserDeleteRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OkResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-delete/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/claimWatts": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WattsClaimRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WattsClaimResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-watts-claim/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/posts": {
			"get": {
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sortBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "order",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodListAttachedPostsResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-posts-list/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.sortBy": "method.request.querystring.sortBy",
						"integration.request.querystring.id": "method.request.querystring.id",
						"integration.request.querystring.order": "method.request.querystring.order"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/list/top": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-list-top/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never",
					"cacheNamespace": "ApiGatewayMethodMoodListTopGetCacheNS",
					"cacheKeyParameters": [
						"method.request.querystring.page"
					]
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/upload/url": {
			"get": {
				"x-amazon-apigateway-integration": {
					"type": "aws_proxy",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-upload-eu-prod-upload-url/invocations",
					"passthroughBehavior": "when_no_match"
				}
			}
		},
		"/user/stake": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserStakeRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnyResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-stake/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/userRate": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RatingUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RatingUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userRate-eu-prod-rate/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/activityStream": {
			"get": {
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AnyResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-activityStream/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.limit": "method.request.querystring.limit",
						"integration.request.querystring.after": "method.request.querystring.after"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/syncContacts": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SyncContactsRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SyncContactsResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-syncContacts/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/search/semantic": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-search-eu-prod-search-semantic/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/upload": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UploadRequestGeneric"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-upload/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/activation/estimate/watts": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-activation-eu-prod-estimate-watts/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/list/top": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-list-top/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/evm/verifyAccount": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EvmVerificationRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OkResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-evm-verify/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/upload": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UploadRequestGeneric"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-upload/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/list/search": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-list-search/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/search/creative": {
			"get": {
				"parameters": [
					{
						"name": "aesthetics",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tags",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreativeSearchResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-search-eu-prod-search-creative/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.aesthetics": "method.request.querystring.aesthetics",
						"integration.request.querystring.tags": "method.request.querystring.tags"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/precreate": {
			"post": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-precreate/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/userRate/request": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RatingNegativeRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RatingUpdateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userRate-eu-prod-requestRate/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/list/public": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-list-public/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never",
					"cacheNamespace": "ApiGatewayMethodMoodListPublicGetCacheNS",
					"cacheKeyParameters": [
						"method.request.querystring.page"
					]
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/auth/onesignal": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-connect-eu-prod-connect-onesignal/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/transfer": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserTransferRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserReadPrivateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-transfer/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/oneonone": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodListGranteesResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-get-oneonone/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/rated/out/posts": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedRatedResponsePost"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userRate-eu-prod-rated-out-posts/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/userUpload/cover": {
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserUploadRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userUpload-eu-prod-upload-cover/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/grants/list": {
			"get": {
				"parameters": [
					{
						"name": "done",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserGrantsResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-list-grants/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.value": "method.request.querystring.value",
						"integration.request.querystring.done": "method.request.querystring.done"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/invitees": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserInvitationPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-inviteesList/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/attach/mood": {
			"put": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EntityAttachRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-attach-mood/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood/attachmentsPublic": {
			"get": {
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "sortBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "order",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodListAttachedResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-attached-list-pub/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.sortBy": "method.request.querystring.sortBy",
						"integration.request.querystring.id": "method.request.querystring.id",
						"integration.request.querystring.order": "method.request.querystring.order"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/post/list/top": {
			"get": {
				"parameters": [
					{
						"name": "direction",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contentType",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PostPagedListReadPublicResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-post-eu-prod-post-list-top/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.orderBy": "method.request.querystring.orderBy",
						"integration.request.querystring.contentType": "method.request.querystring.contentType",
						"integration.request.querystring.direction": "method.request.querystring.direction"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/upload/zip": {
			"get": {
				"x-amazon-apigateway-integration": {
					"type": "aws_proxy",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-upload-eu-prod-upload-zip-invoke/invocations",
					"passthroughBehavior": "when_no_match"
				}
			}
		},
		"/user/claimWattsAll": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-watts-claim-all/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/mood": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-read/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"text/html": "#set ($context.responseOverride.header.Content-Type = \"text/html\")\n#set ($item = $util.parseJson($input.path(\"$.body\")))\n\n#set ($domain = \"os.newcoin.org\")\n#set ($cdn = \"cdn.newgra.ph\")\n\n#set ($url = \"https://${domain}/folder/$item.id\")\n#set ($title = $util.escapeJavaScript($item.title) + \" \" +  \"on newOS\")\n#set ($description = $util.escapeJavaScript($item.description))\n\n#if( $item.author.displayName )\n#set ($author = $util.escapeJavaScript($item.author.displayName))\n#else\n#set ($author = $util.escapeJavaScript($item.author.username))\n#end\n\n#set ($image = \"${item.contentUrl}\")\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n  <meta name=\"description\" content=\"$description\" />\n  <meta name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"$url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"$image\" />\n  <meta itemprop=\"description\" content=\"$description\" />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\" content=\"$image\" />\n  <meta property=\"og:title\" content=\"$title\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:description\" content=\"$description\" />\n  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"og:site_name\" content=\"${domain}\" />\n\n  <!-- Size of image. Any size up to 300. Anything above 300px will not work in WhatsApp -->\n  <meta property=\"og:image:width\" content=\"300\">\n  <meta property=\"og:image:height\" content=\"300\">\n\n  <!-- Open Graph / Articles -->\n  <meta property=\"article:author\" content=\"$author\" />\n  <meta property=\"article:published_time\" content=\"$item.created\" />\n  <meta property=\"article:section\" content=\"$description\" />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"summary_large_image\">\n  <meta name=\"twitter:title\" content=\"$title\">\n  <meta name=\"twitter:description\" content=\"$description\">\n  <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\" content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"https://${domain}/favicon.svg\">\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}/favicon.png\">\n  <link rel=\"manifest\" href=\"https://${domain}/manifest.json\">\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}/favicon.png\">\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\n</head>\n<body>\n<!-- $item.id -->\n<script>\n  window.location = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n</body>\n</html>\n\n",
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"put": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MoodUpdateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-update/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"post": {
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MoodCreateRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodCreateResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-mood-create/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET,POST'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/activation/token-holder-order/oracle": {
			"get": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-activation-eu-prod-holder-order-oracle/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/history": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-chat-history/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/folder": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MoodReadResponse"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Cache-Control": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Vary": {
								"schema": {
									"type": "string"
								}
							},
							"Last-Modified": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-mood-eu-prod-folder-read/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"text/html": "#set ($context.responseOverride.header.Content-Type = \"text/html\")\n#set ($item = $util.parseJson($input.path(\"$.body\")))\n\n#set ($domain = \"os.newcoin.org\")\n#set ($cdn = \"cdn.newgra.ph\")\n\n#set ($url = \"https://${domain}/folder/$item.id\")\n#set ($title = $util.escapeJavaScript($item.title) + \" \" +  \"on newOS\")\n#set ($description = $util.escapeJavaScript($item.description))\n\n#if( $item.author.displayName )\n#set ($author = $util.escapeJavaScript($item.author.displayName))\n#else\n#set ($author = $util.escapeJavaScript($item.author.username))\n#end\n\n#set ($image = \"${item.contentUrl}\")\n<html lang=\"en\">\n<head>\n  <!-- Primary Meta Tags -->\n  <title>${title}</title>\n  <meta name=\"description\" content=\"$description\" />\n  <meta name=\"author\" content=\"$author\" />\n  <meta name=\"url\" content=\"$url\">\n  <meta name=\"keywords\" content=\"\">\n\n  <meta itemprop=\"name\" content=\"$title\" />\n  <meta itemprop=\"image\" content=\"$image\" />\n  <meta itemprop=\"description\" content=\"$description\" />\n\n  <!-- Open Graph / Facebook -->\n  <meta property=\"og:image\" content=\"$image\" />\n  <meta property=\"og:title\" content=\"$title\" />\n  <meta property=\"og:type\" content=\"article\" />\n  <meta property=\"og:description\" content=\"$description\" />\n  <meta property=\"og:url\" content=\"$url\" />\n  <meta property=\"og:site_name\" content=\"${domain}\" />\n\n  <!-- Size of image. Any size up to 300. Anything above 300px will not work in WhatsApp -->\n  <meta property=\"og:image:width\" content=\"300\">\n  <meta property=\"og:image:height\" content=\"300\">\n\n  <!-- Open Graph / Articles -->\n  <meta property=\"article:author\" content=\"$author\" />\n  <meta property=\"article:published_time\" content=\"$item.created\" />\n  <meta property=\"article:section\" content=\"$description\" />\n\n  <!-- Twitter -->\n  <meta name=\"twitter:card\" content=\"summary_large_image\">\n  <meta name=\"twitter:title\" content=\"$title\">\n  <meta name=\"twitter:description\" content=\"$description\">\n  <meta name=\"twitter:image\" content=\"$image\">\n  <meta name=\"twitter:url\" content=\"$url\">\n  <meta name=\"twitter:image:alt\" content=\"$title\">\n\n  <!-- Icons / Minimal -->\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"https://${domain}/favicon.svg\">\n  <link rel=\"icon\" type=\"image/png\" href=\"https://${domain}/favicon.png\">\n  <link rel=\"manifest\" href=\"https://${domain}/manifest.json\">\n  <link rel=\"apple-touch-icon\" href=\"https://${domain}/favicon.png\">\n\n  <!-- meta http-equiv=\"refresh\" content=\"2;url=$url\" / -->\n\n</head>\n<body>\n<!-- $item.id -->\n<script>\n  window.location = \"/?path=\" + window.location.pathname;\n</script>\n<!-- <img src=\"\"> -->\n<noscript>\n  <a href=\"$url\">$url</a>\n</noscript>\n</body>\n</html>\n\n",
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Cache-Control": "'public, max-age=300'",
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Last-Modified": "integration.response.header.Last-Modified",
								"method.response.header.Access-Control-Allow-Origin": "'*'",
								"method.response.header.Vary": "'origin'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/rated/out/users": {
			"get": {
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PagedRatedResponseUser"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"newgraph-api-eu-prod": []
					}
				],
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-userRate-eu-prod-rated-out-users/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.page": "method.request.querystring.page",
						"integration.request.querystring.id": "method.request.querystring.id"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		},
		"/user/badge/list": {
			"get": {
				"parameters": [
					{
						"name": "username",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserBadgesListResponseSchema"
								}
							}
						}
					},
					"400": {
						"description": "400 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "401 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "403 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "404 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "409 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "500 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Content-Type": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "aws",
					"httpMethod": "POST",
					"uri": "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:909716694714:function:newgraph-api-eu-prod-user-eu-prod-list-badges/invocations",
					"responses": {
						".*\"statusCode\":409,.*": {
							"statusCode": "409",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "$input.path(\"$.body\")"
							}
						},
						".*\"statusCode\":400,.*": {
							"statusCode": "400",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":401,.*": {
							"statusCode": "401",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":403,.*": {
							"statusCode": "403",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":404,.*": {
							"statusCode": "404",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						},
						".*\"statusCode\":500,.*": {
							"statusCode": "500",
							"responseParameters": {
								"method.response.header.Content-Type": "'application/json'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							},
							"responseTemplates": {
								"application/json": "#set ($err = $util.parseJson($input.path(\"$.errorMessage\")))\n$err.errorMessage"
							}
						}
					},
					"requestParameters": {
						"integration.request.querystring.id": "method.request.querystring.id",
						"integration.request.querystring.username": "method.request.querystring.username"
					},
					"requestTemplates": {
						"application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  ",
						"application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
					},
					"passthroughBehavior": "never"
				}
			},
			"options": {
				"responses": {
					"200": {
						"description": "200 response",
						"headers": {
							"Access-Control-Allow-Origin": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Methods": {
								"schema": {
									"type": "string"
								}
							},
							"Access-Control-Allow-Headers": {
								"schema": {
									"type": "string"
								}
							}
						},
						"content": {}
					}
				},
				"x-amazon-apigateway-integration": {
					"type": "mock",
					"responses": {
						"default": {
							"statusCode": "200",
							"responseParameters": {
								"method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
								"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
								"method.response.header.Access-Control-Allow-Origin": "'*'"
							}
						}
					},
					"requestTemplates": {
						"application/json": "{statusCode:200}"
					},
					"passthroughBehavior": "when_no_match",
					"contentHandling": "CONVERT_TO_TEXT"
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ChainAddressRequest": {
				"type": "object",
				"properties": {}
			},
			"NodeRequestPost": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					}
				}
			},
			"ValueResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "string"
					}
				}
			},
			"AnyResponse": {
				"type": "object",
				"properties": {}
			},
			"OkResponse": {
				"type": "object",
				"properties": {
					"ok": {
						"type": "boolean"
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"errorMessage": {
						"type": "string"
					},
					"errorCode": {
						"type": "string"
					},
					"statusCode": {
						"type": "number"
					}
				}
			},
			"MoodPagedListReadPublicResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"flags": {
									"type": "string"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"mood"
									]
								},
								"isPrivate": {
									"type": "boolean"
								},
								"title": {
									"type": "string"
								},
								"posts": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coverContentUrl": {
												"type": "string"
											},
											"moodId": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"author": {
												"type": "object",
												"properties": {
													"powered": {
														"type": "number"
													},
													"newcoinAccTx": {
														"type": "string"
													},
													"newcoinPoolId": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"instagram": {
														"type": "string"
													},
													"newcoinActivePublicKey": {
														"type": "string"
													},
													"newcoinPublicKey": {
														"type": "string"
													},
													"powering": {
														"type": "number"
													},
													"lastUpdated": {
														"type": "string"
													},
													"twitter": {
														"type": "string"
													},
													"isAgent": {
														"type": "boolean"
													},
													"newcoinOwnerPublicKey": {
														"type": "string"
													},
													"tiktok": {
														"type": "string"
													},
													"reddit": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"signal": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													},
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"facebookId": {
														"type": "string"
													},
													"verifiedSocialIds": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolTx": {
														"type": "string"
													},
													"license": {
														"type": "string"
													},
													"discord": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"newcoinTicker": {
														"type": "string"
													},
													"youtube": {
														"type": "string"
													},
													"lastActive": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"latitude": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"tumblr": {
														"type": "string"
													},
													"medium": {
														"type": "string"
													},
													"soundcloud": {
														"type": "string"
													},
													"snapchat": {
														"type": "string"
													},
													"apple": {
														"type": "string"
													},
													"watts": {
														"type": "number"
													},
													"youtubeId": {
														"type": "string"
													},
													"categories": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolStake": {
														"type": "number"
													},
													"ethAddress": {
														"type": "string"
													},
													"newcoinPublisherPublicKey": {
														"type": "string"
													},
													"website": {
														"type": "string"
													},
													"spotify": {
														"type": "string"
													},
													"facebook": {
														"type": "string"
													},
													"fullName": {
														"type": "string"
													},
													"telegram": {
														"type": "string"
													},
													"pinterest": {
														"type": "string"
													},
													"label": {
														"type": "string",
														"enum": [
															"user"
														]
													},
													"evm/0x1": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"consentEmail": {
														"type": "string"
													},
													"username": {
														"type": "string"
													}
												}
											},
											"latitude": {
												"type": "number"
											},
											"moods": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"coverContentUrl": {
															"type": "string"
														},
														"created": {
															"type": "string"
														},
														"author": {
															"type": "object",
															"properties": {
																"powered": {
																	"type": "number"
																},
																"newcoinAccTx": {
																	"type": "string"
																},
																"newcoinPoolId": {
																	"type": "string"
																},
																"aspectRatio": {
																	"type": "number"
																},
																"instagram": {
																	"type": "string"
																},
																"newcoinActivePublicKey": {
																	"type": "string"
																},
																"newcoinPublicKey": {
																	"type": "string"
																},
																"powering": {
																	"type": "number"
																},
																"lastUpdated": {
																	"type": "string"
																},
																"twitter": {
																	"type": "string"
																},
																"isAgent": {
																	"type": "boolean"
																},
																"newcoinOwnerPublicKey": {
																	"type": "string"
																},
																"tiktok": {
																	"type": "string"
																},
																"reddit": {
																	"type": "string"
																},
																"id": {
																	"type": "string"
																},
																"contentType": {
																	"type": "string"
																},
																"signal": {
																	"type": "string"
																},
																"longitude": {
																	"type": "number"
																},
																"coverContentUrl": {
																	"type": "string"
																},
																"created": {
																	"type": "string"
																},
																"facebookId": {
																	"type": "string"
																},
																"verifiedSocialIds": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"newcoinPoolTx": {
																	"type": "string"
																},
																"license": {
																	"type": "string"
																},
																"discord": {
																	"type": "string"
																},
																"updated": {
																	"type": "string"
																},
																"newcoinTicker": {
																	"type": "string"
																},
																"youtube": {
																	"type": "string"
																},
																"lastActive": {
																	"type": "string"
																},
																"displayName": {
																	"type": "string"
																},
																"latitude": {
																	"type": "number"
																},
																"description": {
																	"type": "string"
																},
																"tumblr": {
																	"type": "string"
																},
																"medium": {
																	"type": "string"
																},
																"soundcloud": {
																	"type": "string"
																},
																"snapchat": {
																	"type": "string"
																},
																"apple": {
																	"type": "string"
																},
																"watts": {
																	"type": "number"
																},
																"youtubeId": {
																	"type": "string"
																},
																"categories": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																},
																"newcoinPoolStake": {
																	"type": "number"
																},
																"ethAddress": {
																	"type": "string"
																},
																"newcoinPublisherPublicKey": {
																	"type": "string"
																},
																"website": {
																	"type": "string"
																},
																"spotify": {
																	"type": "string"
																},
																"facebook": {
																	"type": "string"
																},
																"fullName": {
																	"type": "string"
																},
																"telegram": {
																	"type": "string"
																},
																"pinterest": {
																	"type": "string"
																},
																"label": {
																	"type": "string",
																	"enum": [
																		"user"
																	]
																},
																"evm/0x1": {
																	"type": "string"
																},
																"contentUrl": {
																	"type": "string"
																},
																"deleted": {
																	"type": "boolean"
																},
																"blurHash": {
																	"type": "string"
																},
																"consentEmail": {
																	"type": "string"
																},
																"username": {
																	"type": "string"
																}
															}
														},
														"latitude": {
															"type": "number"
														},
														"flags": {
															"type": "string"
														},
														"description": {
															"type": "string"
														},
														"aspectRatio": {
															"type": "number"
														},
														"label": {
															"type": "string",
															"enum": [
																"mood"
															]
														},
														"isPrivate": {
															"type": "boolean"
														},
														"title": {
															"type": "string"
														},
														"content": {
															"type": "string"
														},
														"stakeToAccess": {
															"type": "number"
														},
														"tags": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"_rel": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"displayValue": {
																					"type": "string"
																				},
																				"score": {
																					"type": "number"
																				},
																				"polygons": {
																					"type": "string"
																				},
																				"source": {
																					"type": "string"
																				},
																				"category": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"id": {
																		"type": "string"
																	},
																	"value": {
																		"type": "string"
																	}
																}
															}
														},
														"licenseType": {
															"type": "string"
														},
														"contentUrl": {
															"type": "string"
														},
														"deleted": {
															"type": "boolean"
														},
														"defaultView": {
															"type": "string"
														},
														"postsCount": {
															"type": "number"
														},
														"blurHash": {
															"type": "string"
														},
														"id": {
															"type": "string"
														},
														"updated": {
															"type": "string"
														},
														"contentType": {
															"type": "string"
														},
														"longitude": {
															"type": "number"
														}
													}
												}
											},
											"rating": {
												"type": "number"
											},
											"description": {
												"type": "string"
											},
											"aspectRatio": {
												"type": "number"
											},
											"label": {
												"type": "string",
												"enum": [
													"post"
												]
											},
											"title": {
												"type": "string"
											},
											"content": {
												"type": "string"
											},
											"tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"_rel": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"displayValue": {
																		"type": "string"
																	},
																	"score": {
																		"type": "number"
																	},
																	"polygons": {
																		"type": "string"
																	},
																	"source": {
																		"type": "string"
																	},
																	"category": {
																		"type": "string"
																	}
																}
															}
														},
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"license": {
												"type": "string"
											},
											"contentUrl": {
												"type": "string"
											},
											"deleted": {
												"type": "boolean"
											},
											"blurHash": {
												"type": "string"
											},
											"newcoinMintTx": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"embed": {
												"type": "string"
											},
											"updated": {
												"type": "string"
											},
											"contentType": {
												"type": "string"
											},
											"longitude": {
												"type": "number"
											}
										}
									}
								},
								"content": {
									"type": "string"
								},
								"stakeToAccess": {
									"type": "number"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"licenseType": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"defaultView": {
									"type": "string"
								},
								"postsCount": {
									"type": "number"
								},
								"blurHash": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				},
				"description": "MoodPagedListReadPublicResponse Model"
			},
			"UserReadPublicResponse": {
				"type": "object",
				"properties": {
					"powered": {
						"type": "number"
					},
					"newcoinAccTx": {
						"type": "string"
					},
					"newcoinPoolId": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"instagram": {
						"type": "string"
					},
					"newcoinActivePublicKey": {
						"type": "string"
					},
					"newcoinPublicKey": {
						"type": "string"
					},
					"powering": {
						"type": "number"
					},
					"lastUpdated": {
						"type": "string"
					},
					"twitter": {
						"type": "string"
					},
					"isAgent": {
						"type": "boolean"
					},
					"newcoinOwnerPublicKey": {
						"type": "string"
					},
					"tiktok": {
						"type": "string"
					},
					"reddit": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"signal": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					},
					"coverContentUrl": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"facebookId": {
						"type": "string"
					},
					"verifiedSocialIds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"newcoinPoolTx": {
						"type": "string"
					},
					"license": {
						"type": "string"
					},
					"discord": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"newcoinTicker": {
						"type": "string"
					},
					"youtube": {
						"type": "string"
					},
					"lastActive": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"tumblr": {
						"type": "string"
					},
					"medium": {
						"type": "string"
					},
					"soundcloud": {
						"type": "string"
					},
					"snapchat": {
						"type": "string"
					},
					"apple": {
						"type": "string"
					},
					"watts": {
						"type": "number"
					},
					"youtubeId": {
						"type": "string"
					},
					"categories": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"newcoinPoolStake": {
						"type": "number"
					},
					"ethAddress": {
						"type": "string"
					},
					"newcoinPublisherPublicKey": {
						"type": "string"
					},
					"website": {
						"type": "string"
					},
					"spotify": {
						"type": "string"
					},
					"facebook": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"telegram": {
						"type": "string"
					},
					"pinterest": {
						"type": "string"
					},
					"label": {
						"type": "string",
						"enum": [
							"user"
						]
					},
					"evm/0x1": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"blurHash": {
						"type": "string"
					},
					"consentEmail": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				}
			},
			"UserReadPrivateResponse": {
				"type": "object",
				"properties": {
					"powered": {
						"type": "number"
					},
					"proLevel": {
						"type": "number"
					},
					"newcoinAccTx": {
						"type": "string"
					},
					"bio": {
						"type": "string"
					},
					"newcoinPoolId": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"instagram": {
						"type": "string"
					},
					"newcoinActivePublicKey": {
						"type": "string"
					},
					"newcoinPublicKey": {
						"type": "string"
					},
					"powering": {
						"type": "number"
					},
					"stripeUid": {
						"type": "string"
					},
					"twitter": {
						"type": "string"
					},
					"isAgent": {
						"type": "boolean"
					},
					"newcoinOwnerPublicKey": {
						"type": "string"
					},
					"tiktok": {
						"type": "string"
					},
					"reddit": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"signal": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					},
					"coverContentUrl": {
						"type": "string"
					},
					"subscriptionExpiry": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"availableInvites": {
						"type": "number"
					},
					"facebookId": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"newcoinPoolTx": {
						"type": "string"
					},
					"verifiedSocialIds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"firstName": {
						"type": "string"
					},
					"license": {
						"type": "string"
					},
					"discord": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"newcoinNCOBalance": {
						"type": "number"
					},
					"updated": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"newcoinTicker": {
						"type": "string"
					},
					"youtube": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"consentPrivacyPolicy": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"tumblr": {
						"type": "string"
					},
					"medium": {
						"type": "string"
					},
					"soundcloud": {
						"type": "string"
					},
					"agentMode": {
						"type": "string"
					},
					"snapchat": {
						"type": "string"
					},
					"apple": {
						"type": "string"
					},
					"consentTestgroup": {
						"type": "string"
					},
					"newcoinPrivateKey": {
						"type": "string"
					},
					"watts": {
						"type": "number"
					},
					"smartDropGeneration": {
						"type": "string"
					},
					"subscriptionStatus": {
						"type": "string"
					},
					"newcoinPublisherPrivateKey": {
						"type": "string"
					},
					"youtubeId": {
						"type": "string"
					},
					"categories": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"newcoinPoolStake": {
						"type": "number"
					},
					"ethAddress": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"isPro": {
						"type": "boolean"
					},
					"newcoinPublisherPublicKey": {
						"type": "string"
					},
					"newcoinActivePrivateKey": {
						"type": "string"
					},
					"website": {
						"type": "string"
					},
					"spotify": {
						"type": "string"
					},
					"facebook": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"telegram": {
						"type": "string"
					},
					"pinterest": {
						"type": "string"
					},
					"newcoinOwnerPrivateKey": {
						"type": "string"
					},
					"evm/0x1": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"subscriptionLevel": {
						"type": "string"
					},
					"blurHash": {
						"type": "string"
					},
					"isNetwork": {
						"type": "boolean"
					},
					"consentEmail": {
						"type": "string"
					},
					"subwatts": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				}
			},
			"UserStakeRequest": {
				"required": [
					"amount",
					"username"
				],
				"type": "object",
				"properties": {
					"amount": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				}
			},
			"UserTransferRequest": {
				"type": "object",
				"properties": {
					"encryptedPayload": {
						"type": "string"
					},
					"payload": {
						"type": "string"
					}
				}
			},
			"WattsClaimRequest": {
				"type": "object",
				"properties": {
					"claims": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {}
						}
					}
				}
			},
			"WattsClaimResponse": {
				"type": "object",
				"properties": {
					"failed": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"claim": {
									"type": "object",
									"properties": {
										"wattType": {
											"type": "string"
										},
										"claim": {
											"type": "number"
										}
									}
								},
								"error": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"updated": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"claim": {
									"type": "object",
									"properties": {
										"wattType": {
											"type": "string"
										},
										"claim": {
											"type": "number"
										}
									}
								}
							}
						}
					}
				}
			},
			"UserCreateRequest": {
				"type": "object",
				"properties": {
					"newcoinTicker": {
						"type": "string"
					},
					"youtube": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"consentPrivacyPolicy": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"tumblr": {
						"type": "string"
					},
					"instagram": {
						"type": "string"
					},
					"medium": {
						"type": "string"
					},
					"soundcloud": {
						"type": "string"
					},
					"snapchat": {
						"type": "string"
					},
					"apple": {
						"type": "string"
					},
					"consentTestgroup": {
						"type": "string"
					},
					"twitter": {
						"type": "string"
					},
					"inviteHash": {
						"type": "string"
					},
					"legacyToken": {
						"type": "string"
					},
					"tiktok": {
						"type": "string"
					},
					"reddit": {
						"type": "string"
					},
					"signal": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					},
					"website": {
						"type": "string"
					},
					"spotify": {
						"type": "string"
					},
					"facebook": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"telegram": {
						"type": "string"
					},
					"pinterest": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"discord": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"consentEmail": {
						"type": "string"
					},
					"couponCode": {
						"type": "string"
					},
					"username": {
						"pattern": "^[a-z][a-z0-9\\.\\-_]{2,32}$",
						"type": "string"
					}
				}
			},
			"UserPreRegisterRequest": {
				"type": "object",
				"properties": {
					"consentTestgroup": {
						"type": "string"
					},
					"consentPrivacyPolicy": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"consentEmail": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				}
			},
			"UserAvailabilityResponse": {
				"type": "object",
				"properties": {
					"offer": {
						"type": "string"
					},
					"available": {
						"type": "boolean"
					}
				}
			},
			"UserUpdateRequest": {
				"required": [
					"id"
				],
				"type": "object",
				"properties": {
					"youtube": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"consentPrivacyPolicy": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"newcoinCreateAccount": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"bio": {
						"type": "string"
					},
					"tumblr": {
						"type": "string"
					},
					"instagram": {
						"type": "string"
					},
					"medium": {
						"type": "string"
					},
					"soundcloud": {
						"type": "string"
					},
					"agentMode": {
						"type": "string"
					},
					"snapchat": {
						"type": "string"
					},
					"apple": {
						"type": "string"
					},
					"twitter": {
						"type": "string"
					},
					"isAgent": {
						"type": "boolean"
					},
					"tiktok": {
						"type": "string"
					},
					"reddit": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"categories": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"signal": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					},
					"website": {
						"type": "string"
					},
					"spotify": {
						"type": "string"
					},
					"facebook": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"telegram": {
						"type": "string"
					},
					"pinterest": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"firstName": {
						"type": "string"
					},
					"discord": {
						"type": "string"
					},
					"consentEmail": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				},
				"anyOf": [
					{
						"required": [
							"fullName"
						],
						"type": "object",
						"properties": {
							"fullName": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"firstName"
						],
						"type": "object",
						"properties": {
							"firstName": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"website"
						],
						"type": "object",
						"properties": {
							"website": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"description"
						],
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"longitude"
						],
						"type": "object",
						"properties": {
							"longitude": {
								"type": "number"
							}
						}
					},
					{
						"required": [
							"latitude"
						],
						"type": "object",
						"properties": {
							"latitude": {
								"type": "number"
							}
						}
					},
					{
						"required": [
							"instagram"
						],
						"type": "object",
						"properties": {
							"instagram": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"tiktok"
						],
						"type": "object",
						"properties": {
							"tiktok": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"youtube"
						],
						"type": "object",
						"properties": {
							"youtube": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"twitter"
						],
						"type": "object",
						"properties": {
							"twitter": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"spotify"
						],
						"type": "object",
						"properties": {
							"spotify": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"pinterest"
						],
						"type": "object",
						"properties": {
							"pinterest": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"snapchat"
						],
						"type": "object",
						"properties": {
							"snapchat": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"reddit"
						],
						"type": "object",
						"properties": {
							"reddit": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"discord"
						],
						"type": "object",
						"properties": {
							"discord": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"tumblr"
						],
						"type": "object",
						"properties": {
							"tumblr": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"soundcloud"
						],
						"type": "object",
						"properties": {
							"soundcloud": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"apple"
						],
						"type": "object",
						"properties": {
							"apple": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"telegram"
						],
						"type": "object",
						"properties": {
							"telegram": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"signal"
						],
						"type": "object",
						"properties": {
							"signal": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"medium"
						],
						"type": "object",
						"properties": {
							"medium": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"facebook"
						],
						"type": "object",
						"properties": {
							"facebook": {
								"type": "string"
							}
						}
					}
				]
			},
			"SyncContactsRequest": {
				"type": "object",
				"properties": {
					"contacts": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"birthday": {
									"type": "string"
								},
								"identifier": {
									"type": "string"
								},
								"androidAccountName": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"prefix": {
									"type": "string"
								},
								"givenName": {
									"type": "string"
								},
								"jobTitle": {
									"type": "string"
								},
								"phones": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"label": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"avatar": {
									"type": "string"
								},
								"suffix": {
									"type": "string"
								},
								"postalAddresses": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"country": {
												"type": "string"
											},
											"city": {
												"type": "string"
											},
											"street": {
												"type": "string"
											},
											"postcode": {
												"type": "string"
											},
											"label": {
												"type": "string"
											},
											"region": {
												"type": "string"
											}
										}
									}
								},
								"emails": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"label": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"androidAccountType": {
									"type": "string"
								},
								"familyName": {
									"type": "string"
								},
								"middleName": {
									"type": "string"
								},
								"company": {
									"type": "string"
								},
								"androidAccountTypeRaw": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"SyncContactsResponse": {
				"type": "object",
				"properties": {}
			},
			"UserPagedListReadPublicResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"powered": {
									"type": "number"
								},
								"newcoinAccTx": {
									"type": "string"
								},
								"newcoinPoolId": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"instagram": {
									"type": "string"
								},
								"newcoinActivePublicKey": {
									"type": "string"
								},
								"newcoinPublicKey": {
									"type": "string"
								},
								"powering": {
									"type": "number"
								},
								"lastUpdated": {
									"type": "string"
								},
								"twitter": {
									"type": "string"
								},
								"isAgent": {
									"type": "boolean"
								},
								"newcoinOwnerPublicKey": {
									"type": "string"
								},
								"tiktok": {
									"type": "string"
								},
								"reddit": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"signal": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								},
								"coverContentUrl": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"facebookId": {
									"type": "string"
								},
								"verifiedSocialIds": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"newcoinPoolTx": {
									"type": "string"
								},
								"license": {
									"type": "string"
								},
								"discord": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"newcoinTicker": {
									"type": "string"
								},
								"youtube": {
									"type": "string"
								},
								"lastActive": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"latitude": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"tumblr": {
									"type": "string"
								},
								"medium": {
									"type": "string"
								},
								"soundcloud": {
									"type": "string"
								},
								"snapchat": {
									"type": "string"
								},
								"apple": {
									"type": "string"
								},
								"watts": {
									"type": "number"
								},
								"youtubeId": {
									"type": "string"
								},
								"categories": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"newcoinPoolStake": {
									"type": "number"
								},
								"ethAddress": {
									"type": "string"
								},
								"newcoinPublisherPublicKey": {
									"type": "string"
								},
								"website": {
									"type": "string"
								},
								"spotify": {
									"type": "string"
								},
								"facebook": {
									"type": "string"
								},
								"fullName": {
									"type": "string"
								},
								"telegram": {
									"type": "string"
								},
								"pinterest": {
									"type": "string"
								},
								"label": {
									"type": "string",
									"enum": [
										"user"
									]
								},
								"evm/0x1": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"consentEmail": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"UserInvitationPagedListReadPublicResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"powered": {
									"type": "number"
								},
								"newcoinAccTx": {
									"type": "string"
								},
								"newcoinPoolId": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"instagram": {
									"type": "string"
								},
								"newcoinActivePublicKey": {
									"type": "string"
								},
								"newcoinPublicKey": {
									"type": "string"
								},
								"powering": {
									"type": "number"
								},
								"lastUpdated": {
									"type": "string"
								},
								"twitter": {
									"type": "string"
								},
								"isAgent": {
									"type": "boolean"
								},
								"newcoinOwnerPublicKey": {
									"type": "string"
								},
								"tiktok": {
									"type": "string"
								},
								"reddit": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"signal": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								},
								"coverContentUrl": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"invitation": {
									"type": "object",
									"properties": {
										"youtube": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"instagram": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"hash": {
											"type": "string"
										}
									}
								},
								"facebookId": {
									"type": "string"
								},
								"verifiedSocialIds": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"newcoinPoolTx": {
									"type": "string"
								},
								"license": {
									"type": "string"
								},
								"discord": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"newcoinTicker": {
									"type": "string"
								},
								"youtube": {
									"type": "string"
								},
								"lastActive": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"latitude": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"tumblr": {
									"type": "string"
								},
								"medium": {
									"type": "string"
								},
								"soundcloud": {
									"type": "string"
								},
								"snapchat": {
									"type": "string"
								},
								"apple": {
									"type": "string"
								},
								"watts": {
									"type": "number"
								},
								"youtubeId": {
									"type": "string"
								},
								"categories": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"newcoinPoolStake": {
									"type": "number"
								},
								"ethAddress": {
									"type": "string"
								},
								"newcoinPublisherPublicKey": {
									"type": "string"
								},
								"website": {
									"type": "string"
								},
								"spotify": {
									"type": "string"
								},
								"facebook": {
									"type": "string"
								},
								"fullName": {
									"type": "string"
								},
								"telegram": {
									"type": "string"
								},
								"pinterest": {
									"type": "string"
								},
								"label": {
									"type": "string",
									"enum": [
										"user"
									]
								},
								"evm/0x1": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"consentEmail": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"UserInvitationReadPublicResponse": {
				"type": "object",
				"properties": {
					"powered": {
						"type": "number"
					},
					"newcoinAccTx": {
						"type": "string"
					},
					"newcoinPoolId": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"instagram": {
						"type": "string"
					},
					"newcoinActivePublicKey": {
						"type": "string"
					},
					"newcoinPublicKey": {
						"type": "string"
					},
					"powering": {
						"type": "number"
					},
					"lastUpdated": {
						"type": "string"
					},
					"twitter": {
						"type": "string"
					},
					"isAgent": {
						"type": "boolean"
					},
					"newcoinOwnerPublicKey": {
						"type": "string"
					},
					"tiktok": {
						"type": "string"
					},
					"reddit": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"signal": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					},
					"coverContentUrl": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"invitation": {
						"type": "object",
						"properties": {
							"youtube": {
								"type": "string"
							},
							"created": {
								"type": "string"
							},
							"spotify": {
								"type": "string"
							},
							"facebook": {
								"type": "string"
							},
							"tumblr": {
								"type": "string"
							},
							"telegram": {
								"type": "string"
							},
							"pinterest": {
								"type": "string"
							},
							"instagram": {
								"type": "string"
							},
							"medium": {
								"type": "string"
							},
							"soundcloud": {
								"type": "string"
							},
							"snapchat": {
								"type": "string"
							},
							"apple": {
								"type": "string"
							},
							"twitter": {
								"type": "string"
							},
							"discord": {
								"type": "string"
							},
							"tiktok": {
								"type": "string"
							},
							"reddit": {
								"type": "string"
							},
							"signal": {
								"type": "string"
							},
							"hash": {
								"type": "string"
							}
						}
					},
					"facebookId": {
						"type": "string"
					},
					"verifiedSocialIds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"newcoinPoolTx": {
						"type": "string"
					},
					"license": {
						"type": "string"
					},
					"discord": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"newcoinTicker": {
						"type": "string"
					},
					"youtube": {
						"type": "string"
					},
					"lastActive": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"tumblr": {
						"type": "string"
					},
					"medium": {
						"type": "string"
					},
					"soundcloud": {
						"type": "string"
					},
					"snapchat": {
						"type": "string"
					},
					"apple": {
						"type": "string"
					},
					"watts": {
						"type": "number"
					},
					"youtubeId": {
						"type": "string"
					},
					"categories": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"newcoinPoolStake": {
						"type": "number"
					},
					"ethAddress": {
						"type": "string"
					},
					"newcoinPublisherPublicKey": {
						"type": "string"
					},
					"website": {
						"type": "string"
					},
					"spotify": {
						"type": "string"
					},
					"facebook": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"telegram": {
						"type": "string"
					},
					"pinterest": {
						"type": "string"
					},
					"label": {
						"type": "string",
						"enum": [
							"user"
						]
					},
					"evm/0x1": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"blurHash": {
						"type": "string"
					},
					"consentEmail": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				}
			},
			"UserInviteRequest": {
				"required": [
					"fullName"
				],
				"type": "object",
				"properties": {
					"youtube": {
						"type": "string"
					},
					"spotify": {
						"type": "string"
					},
					"facebook": {
						"type": "string"
					},
					"fullName": {
						"type": "string"
					},
					"tumblr": {
						"type": "string"
					},
					"telegram": {
						"type": "string"
					},
					"pinterest": {
						"type": "string"
					},
					"instagram": {
						"type": "string"
					},
					"medium": {
						"type": "string"
					},
					"soundcloud": {
						"type": "string"
					},
					"snapchat": {
						"type": "string"
					},
					"apple": {
						"type": "string"
					},
					"twitter": {
						"type": "string"
					},
					"discord": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"tiktok": {
						"type": "string"
					},
					"reddit": {
						"type": "string"
					},
					"signal": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"anyOf": [
					{
						"required": [
							"phone"
						],
						"type": "object"
					},
					{
						"required": [
							"email"
						],
						"type": "object"
					},
					{
						"required": [
							"instagram"
						],
						"type": "object",
						"properties": {
							"instagram": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"tiktok"
						],
						"type": "object",
						"properties": {
							"tiktok": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"youtube"
						],
						"type": "object",
						"properties": {
							"youtube": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"twitter"
						],
						"type": "object",
						"properties": {
							"twitter": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"spotify"
						],
						"type": "object",
						"properties": {
							"spotify": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"pinterest"
						],
						"type": "object",
						"properties": {
							"pinterest": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"snapchat"
						],
						"type": "object",
						"properties": {
							"snapchat": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"reddit"
						],
						"type": "object",
						"properties": {
							"reddit": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"discord"
						],
						"type": "object",
						"properties": {
							"discord": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"tumblr"
						],
						"type": "object",
						"properties": {
							"tumblr": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"soundcloud"
						],
						"type": "object",
						"properties": {
							"soundcloud": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"apple"
						],
						"type": "object",
						"properties": {
							"apple": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"telegram"
						],
						"type": "object",
						"properties": {
							"telegram": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"signal"
						],
						"type": "object",
						"properties": {
							"signal": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"medium"
						],
						"type": "object",
						"properties": {
							"medium": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"facebook"
						],
						"type": "object",
						"properties": {
							"facebook": {
								"type": "string"
							}
						}
					}
				]
			},
			"UserDeleteRequest": {
				"type": "object",
				"properties": {
					"phone": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				}
			},
			"UserBadgesListResponseSchema": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"body": {
									"type": "object",
									"properties": {
										"deleted": {
											"type": "boolean"
										},
										"created": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"title": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"value": {
											"type": "object"
										},
										"updated": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"UserGrantsResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"level": {
									"type": "string"
								},
								"target": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"label": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"RatingUpdateRequest": {
				"required": [
					"value"
				],
				"type": "object",
				"properties": {
					"targetId": {
						"type": "string"
					},
					"contextType": {
						"type": "string"
					},
					"contextValue": {
						"type": "string"
					},
					"value": {
						"maximum": 100,
						"minimum": -1,
						"type": "number"
					}
				}
			},
			"RatingNegativeRequest": {
				"type": "object",
				"properties": {
					"targetId": {
						"type": "string"
					}
				}
			},
			"PagedRatedResponseUser": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"powered": {
									"type": "number"
								},
								"newcoinAccTx": {
									"type": "string"
								},
								"rating": {
									"type": "object",
									"properties": {
										"created": {
											"type": "string"
										},
										"TxID_mintAsset": {
											"type": "string"
										},
										"value": {
											"maximum": 100,
											"minimum": 0,
											"type": "number"
										},
										"updated": {
											"type": "string"
										}
									}
								},
								"newcoinPoolId": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"instagram": {
									"type": "string"
								},
								"newcoinActivePublicKey": {
									"type": "string"
								},
								"newcoinPublicKey": {
									"type": "string"
								},
								"powering": {
									"type": "number"
								},
								"lastUpdated": {
									"type": "string"
								},
								"twitter": {
									"type": "string"
								},
								"newcoinOwnerPublicKey": {
									"type": "string"
								},
								"tiktok": {
									"type": "string"
								},
								"reddit": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"signal": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								},
								"coverContentUrl": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"facebookId": {
									"type": "string"
								},
								"verifiedSocialIds": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"newcoinPoolTx": {
									"type": "string"
								},
								"license": {
									"type": "string"
								},
								"discord": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"newcoinTicker": {
									"type": "string"
								},
								"youtube": {
									"type": "string"
								},
								"displayName": {
									"type": "string"
								},
								"latitude": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"tumblr": {
									"type": "string"
								},
								"medium": {
									"type": "string"
								},
								"soundcloud": {
									"type": "string"
								},
								"snapchat": {
									"type": "string"
								},
								"apple": {
									"type": "string"
								},
								"watts": {
									"type": "number"
								},
								"youtubeId": {
									"type": "string"
								},
								"newcoinPoolStake": {
									"type": "number"
								},
								"ethAddress": {
									"type": "string"
								},
								"newcoinPublisherPublicKey": {
									"type": "string"
								},
								"website": {
									"type": "string"
								},
								"spotify": {
									"type": "string"
								},
								"facebook": {
									"type": "string"
								},
								"fullName": {
									"type": "string"
								},
								"telegram": {
									"type": "string"
								},
								"pinterest": {
									"type": "string"
								},
								"label": {
									"type": "string",
									"enum": [
										"user"
									]
								},
								"evm/0x1": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"consentEmail": {
									"type": "string"
								},
								"username": {
									"type": "string"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"PagedRatedResponsePost": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"moodId": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"moods": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coverContentUrl": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"author": {
												"type": "object",
												"properties": {
													"powered": {
														"type": "number"
													},
													"newcoinAccTx": {
														"type": "string"
													},
													"newcoinPoolId": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"instagram": {
														"type": "string"
													},
													"newcoinActivePublicKey": {
														"type": "string"
													},
													"newcoinPublicKey": {
														"type": "string"
													},
													"powering": {
														"type": "number"
													},
													"lastUpdated": {
														"type": "string"
													},
													"twitter": {
														"type": "string"
													},
													"newcoinOwnerPublicKey": {
														"type": "string"
													},
													"tiktok": {
														"type": "string"
													},
													"reddit": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"signal": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													},
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"facebookId": {
														"type": "string"
													},
													"verifiedSocialIds": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolTx": {
														"type": "string"
													},
													"license": {
														"type": "string"
													},
													"discord": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"newcoinTicker": {
														"type": "string"
													},
													"youtube": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"latitude": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"tumblr": {
														"type": "string"
													},
													"medium": {
														"type": "string"
													},
													"soundcloud": {
														"type": "string"
													},
													"snapchat": {
														"type": "string"
													},
													"apple": {
														"type": "string"
													},
													"watts": {
														"type": "number"
													},
													"youtubeId": {
														"type": "string"
													},
													"newcoinPoolStake": {
														"type": "number"
													},
													"ethAddress": {
														"type": "string"
													},
													"newcoinPublisherPublicKey": {
														"type": "string"
													},
													"website": {
														"type": "string"
													},
													"spotify": {
														"type": "string"
													},
													"facebook": {
														"type": "string"
													},
													"fullName": {
														"type": "string"
													},
													"telegram": {
														"type": "string"
													},
													"pinterest": {
														"type": "string"
													},
													"label": {
														"type": "string",
														"enum": [
															"user"
														]
													},
													"evm/0x1": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"consentEmail": {
														"type": "string"
													},
													"username": {
														"type": "string"
													}
												}
											},
											"latitude": {
												"type": "number"
											},
											"flags": {
												"type": "string"
											},
											"description": {
												"type": "string"
											},
											"aspectRatio": {
												"type": "number"
											},
											"label": {
												"type": "string",
												"enum": [
													"mood"
												]
											},
											"title": {
												"type": "string"
											},
											"content": {
												"type": "string"
											},
											"stakeToAccess": {
												"type": "number"
											},
											"tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"_rel": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"displayValue": {
																		"type": "string"
																	},
																	"score": {
																		"type": "number"
																	},
																	"polygons": {
																		"type": "string"
																	},
																	"source": {
																		"type": "string"
																	},
																	"category": {
																		"type": "string"
																	}
																}
															}
														},
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"contentUrl": {
												"type": "string"
											},
											"deleted": {
												"type": "boolean"
											},
											"defaultView": {
												"type": "string"
											},
											"postsCount": {
												"type": "number"
											},
											"blurHash": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"updated": {
												"type": "string"
											},
											"contentType": {
												"type": "string"
											},
											"longitude": {
												"type": "number"
											}
										}
									}
								},
								"rating": {
									"type": "object",
									"properties": {
										"created": {
											"type": "string"
										},
										"TxID_mintAsset": {
											"type": "string"
										},
										"value": {
											"maximum": 100,
											"minimum": 0,
											"type": "number"
										},
										"updated": {
											"type": "string"
										}
									}
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"post"
									]
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"license": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"newcoinMintTx": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"embed": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"RatingUpdateResponse": {
				"type": "object",
				"properties": {
					"created": {
						"type": "string"
					},
					"TxID_mintAsset": {
						"type": "string"
					},
					"value": {
						"maximum": 100,
						"minimum": 0,
						"type": "number"
					},
					"updated": {
						"type": "string"
					}
				}
			},
			"UserUploadRequest": {
				"required": [
					"contentType",
					"filename"
				],
				"type": "object",
				"properties": {
					"filename": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					}
				}
			},
			"UploadRequest": {
				"required": [
					"contentType",
					"filename",
					"targetId",
					"targetModel"
				],
				"type": "object",
				"properties": {
					"filename": {
						"type": "string"
					},
					"targetId": {
						"type": "string"
					},
					"targetModel": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					}
				}
			},
			"UploadRequestGeneric": {
				"required": [
					"contentType",
					"filename",
					"targetId"
				],
				"type": "object",
				"properties": {
					"filename": {
						"type": "string"
					},
					"targetId": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					}
				}
			},
			"UploadResponse": {
				"type": "object",
				"properties": {
					"filename": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"url": {
						"type": "string"
					}
				}
			},
			"ReportUpdateRequest": {
				"required": [
					"reason",
					"targetId"
				],
				"type": "object",
				"properties": {
					"reason": {
						"type": "string"
					},
					"targetId": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					}
				}
			},
			"ReportUpdateResponse": {
				"type": "object",
				"properties": {
					"id": {
						"type": "number"
					}
				}
			},
			"PostCreateResponse": {
				"type": "object",
				"properties": {
					"coverContentUrl": {
						"type": "string"
					},
					"moodId": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"author": {
						"type": "object",
						"properties": {
							"powered": {
								"type": "number"
							},
							"newcoinAccTx": {
								"type": "string"
							},
							"newcoinPoolId": {
								"type": "string"
							},
							"aspectRatio": {
								"type": "number"
							},
							"instagram": {
								"type": "string"
							},
							"newcoinActivePublicKey": {
								"type": "string"
							},
							"newcoinPublicKey": {
								"type": "string"
							},
							"powering": {
								"type": "number"
							},
							"lastUpdated": {
								"type": "string"
							},
							"twitter": {
								"type": "string"
							},
							"isAgent": {
								"type": "boolean"
							},
							"newcoinOwnerPublicKey": {
								"type": "string"
							},
							"tiktok": {
								"type": "string"
							},
							"reddit": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"contentType": {
								"type": "string"
							},
							"signal": {
								"type": "string"
							},
							"longitude": {
								"type": "number"
							},
							"coverContentUrl": {
								"type": "string"
							},
							"created": {
								"type": "string"
							},
							"facebookId": {
								"type": "string"
							},
							"verifiedSocialIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolTx": {
								"type": "string"
							},
							"license": {
								"type": "string"
							},
							"discord": {
								"type": "string"
							},
							"updated": {
								"type": "string"
							},
							"newcoinTicker": {
								"type": "string"
							},
							"youtube": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"latitude": {
								"type": "number"
							},
							"description": {
								"type": "string"
							},
							"tumblr": {
								"type": "string"
							},
							"medium": {
								"type": "string"
							},
							"soundcloud": {
								"type": "string"
							},
							"snapchat": {
								"type": "string"
							},
							"apple": {
								"type": "string"
							},
							"watts": {
								"type": "number"
							},
							"youtubeId": {
								"type": "string"
							},
							"newcoinPoolStake": {
								"type": "number"
							},
							"ethAddress": {
								"type": "string"
							},
							"newcoinPublisherPublicKey": {
								"type": "string"
							},
							"website": {
								"type": "string"
							},
							"spotify": {
								"type": "string"
							},
							"facebook": {
								"type": "string"
							},
							"fullName": {
								"type": "string"
							},
							"telegram": {
								"type": "string"
							},
							"pinterest": {
								"type": "string"
							},
							"label": {
								"type": "string",
								"enum": [
									"user"
								]
							},
							"evm/0x1": {
								"type": "string"
							},
							"contentUrl": {
								"type": "string"
							},
							"deleted": {
								"type": "boolean"
							},
							"blurHash": {
								"type": "string"
							},
							"consentEmail": {
								"type": "string"
							},
							"username": {
								"type": "string"
							}
						}
					},
					"latitude": {
						"type": "number"
					},
					"moods": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"flags": {
									"type": "string"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"mood"
									]
								},
								"isPrivate": {
									"type": "boolean"
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"stakeToAccess": {
									"type": "number"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"licenseType": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"defaultView": {
									"type": "string"
								},
								"postsCount": {
									"type": "number"
								},
								"blurHash": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"rating": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"label": {
						"type": "string",
						"enum": [
							"post"
						]
					},
					"title": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"_rel": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"displayValue": {
												"type": "string"
											},
											"score": {
												"type": "number"
											},
											"polygons": {
												"type": "string"
											},
											"source": {
												"type": "string"
											},
											"category": {
												"type": "string"
											}
										}
									}
								},
								"id": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"license": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"blurHash": {
						"type": "string"
					},
					"newcoinMintTx": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"embed": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					}
				}
			},
			"PostReadResponse": {
				"type": "object",
				"properties": {
					"coverContentUrl": {
						"type": "string"
					},
					"moodId": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"author": {
						"type": "object",
						"properties": {
							"powered": {
								"type": "number"
							},
							"newcoinAccTx": {
								"type": "string"
							},
							"newcoinPoolId": {
								"type": "string"
							},
							"aspectRatio": {
								"type": "number"
							},
							"instagram": {
								"type": "string"
							},
							"newcoinActivePublicKey": {
								"type": "string"
							},
							"newcoinPublicKey": {
								"type": "string"
							},
							"powering": {
								"type": "number"
							},
							"lastUpdated": {
								"type": "string"
							},
							"twitter": {
								"type": "string"
							},
							"isAgent": {
								"type": "boolean"
							},
							"newcoinOwnerPublicKey": {
								"type": "string"
							},
							"tiktok": {
								"type": "string"
							},
							"reddit": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"contentType": {
								"type": "string"
							},
							"signal": {
								"type": "string"
							},
							"longitude": {
								"type": "number"
							},
							"coverContentUrl": {
								"type": "string"
							},
							"created": {
								"type": "string"
							},
							"facebookId": {
								"type": "string"
							},
							"verifiedSocialIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolTx": {
								"type": "string"
							},
							"license": {
								"type": "string"
							},
							"discord": {
								"type": "string"
							},
							"updated": {
								"type": "string"
							},
							"newcoinTicker": {
								"type": "string"
							},
							"youtube": {
								"type": "string"
							},
							"lastActive": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"latitude": {
								"type": "number"
							},
							"description": {
								"type": "string"
							},
							"tumblr": {
								"type": "string"
							},
							"medium": {
								"type": "string"
							},
							"soundcloud": {
								"type": "string"
							},
							"snapchat": {
								"type": "string"
							},
							"apple": {
								"type": "string"
							},
							"watts": {
								"type": "number"
							},
							"youtubeId": {
								"type": "string"
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolStake": {
								"type": "number"
							},
							"ethAddress": {
								"type": "string"
							},
							"newcoinPublisherPublicKey": {
								"type": "string"
							},
							"website": {
								"type": "string"
							},
							"spotify": {
								"type": "string"
							},
							"facebook": {
								"type": "string"
							},
							"fullName": {
								"type": "string"
							},
							"telegram": {
								"type": "string"
							},
							"pinterest": {
								"type": "string"
							},
							"label": {
								"type": "string",
								"enum": [
									"user"
								]
							},
							"evm/0x1": {
								"type": "string"
							},
							"contentUrl": {
								"type": "string"
							},
							"deleted": {
								"type": "boolean"
							},
							"blurHash": {
								"type": "string"
							},
							"consentEmail": {
								"type": "string"
							},
							"username": {
								"type": "string"
							}
						}
					},
					"latitude": {
						"type": "number"
					},
					"moods": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"flags": {
									"type": "string"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"mood"
									]
								},
								"isPrivate": {
									"type": "boolean"
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"stakeToAccess": {
									"type": "number"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"licenseType": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"defaultView": {
									"type": "string"
								},
								"postsCount": {
									"type": "number"
								},
								"blurHash": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"rating": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"label": {
						"type": "string",
						"enum": [
							"post"
						]
					},
					"title": {
						"type": "string"
					},
					"content": {
						"type": "string"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"_rel": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"displayValue": {
												"type": "string"
											},
											"score": {
												"type": "number"
											},
											"polygons": {
												"type": "string"
											},
											"source": {
												"type": "string"
											},
											"category": {
												"type": "string"
											}
										}
									}
								},
								"id": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"license": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"blurHash": {
						"type": "string"
					},
					"newcoinMintTx": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"embed": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					}
				},
				"description": "PostReadResponse Model"
			},
			"PostCreateRequest": {
				"type": "object",
				"properties": {
					"license": {
						"type": "string"
					},
					"moodId": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"doMint": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"embed": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"content": {
						"type": "string"
					}
				}
			},
			"PostUpdateRequest": {
				"required": [
					"id"
				],
				"type": "object",
				"properties": {
					"license": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"doMint": {
						"type": "boolean"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					}
				},
				"anyOf": [
					{
						"required": [
							"title"
						],
						"type": "object",
						"properties": {
							"title": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"description"
						],
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"longitude"
						],
						"type": "object",
						"properties": {
							"longitude": {
								"type": "number"
							}
						}
					},
					{
						"required": [
							"latitude"
						],
						"type": "object",
						"properties": {
							"latitude": {
								"type": "number"
							}
						}
					},
					{
						"type": "object",
						"properties": {
							"license": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"doMint"
						],
						"type": "object",
						"properties": {
							"doMint": {
								"type": "boolean"
							}
						}
					}
				]
			},
			"PostPagedListReadPublicResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"moodId": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"moods": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coverContentUrl": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"author": {
												"type": "object",
												"properties": {
													"powered": {
														"type": "number"
													},
													"newcoinAccTx": {
														"type": "string"
													},
													"newcoinPoolId": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"instagram": {
														"type": "string"
													},
													"newcoinActivePublicKey": {
														"type": "string"
													},
													"newcoinPublicKey": {
														"type": "string"
													},
													"powering": {
														"type": "number"
													},
													"lastUpdated": {
														"type": "string"
													},
													"twitter": {
														"type": "string"
													},
													"isAgent": {
														"type": "boolean"
													},
													"newcoinOwnerPublicKey": {
														"type": "string"
													},
													"tiktok": {
														"type": "string"
													},
													"reddit": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"signal": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													},
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"facebookId": {
														"type": "string"
													},
													"verifiedSocialIds": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolTx": {
														"type": "string"
													},
													"license": {
														"type": "string"
													},
													"discord": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"newcoinTicker": {
														"type": "string"
													},
													"youtube": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"latitude": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"tumblr": {
														"type": "string"
													},
													"medium": {
														"type": "string"
													},
													"soundcloud": {
														"type": "string"
													},
													"snapchat": {
														"type": "string"
													},
													"apple": {
														"type": "string"
													},
													"watts": {
														"type": "number"
													},
													"youtubeId": {
														"type": "string"
													},
													"newcoinPoolStake": {
														"type": "number"
													},
													"ethAddress": {
														"type": "string"
													},
													"newcoinPublisherPublicKey": {
														"type": "string"
													},
													"website": {
														"type": "string"
													},
													"spotify": {
														"type": "string"
													},
													"facebook": {
														"type": "string"
													},
													"fullName": {
														"type": "string"
													},
													"telegram": {
														"type": "string"
													},
													"pinterest": {
														"type": "string"
													},
													"label": {
														"type": "string",
														"enum": [
															"user"
														]
													},
													"evm/0x1": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"consentEmail": {
														"type": "string"
													},
													"username": {
														"type": "string"
													}
												}
											},
											"latitude": {
												"type": "number"
											},
											"flags": {
												"type": "string"
											},
											"description": {
												"type": "string"
											},
											"aspectRatio": {
												"type": "number"
											},
											"label": {
												"type": "string",
												"enum": [
													"mood"
												]
											},
											"isPrivate": {
												"type": "boolean"
											},
											"title": {
												"type": "string"
											},
											"content": {
												"type": "string"
											},
											"stakeToAccess": {
												"type": "number"
											},
											"tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"_rel": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"displayValue": {
																		"type": "string"
																	},
																	"score": {
																		"type": "number"
																	},
																	"polygons": {
																		"type": "string"
																	},
																	"source": {
																		"type": "string"
																	},
																	"category": {
																		"type": "string"
																	}
																}
															}
														},
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"licenseType": {
												"type": "string"
											},
											"contentUrl": {
												"type": "string"
											},
											"deleted": {
												"type": "boolean"
											},
											"defaultView": {
												"type": "string"
											},
											"postsCount": {
												"type": "number"
											},
											"blurHash": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"updated": {
												"type": "string"
											},
											"contentType": {
												"type": "string"
											},
											"longitude": {
												"type": "number"
											}
										}
									}
								},
								"rating": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"post"
									]
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"license": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"newcoinMintTx": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"embed": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				}
			},
			"PostTagsSearchPublicResponse": {
				"type": "object",
				"properties": {
					"done": {
						"type": "boolean"
					},
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"created": {
									"type": "string"
								},
								"tag": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"PostRemoteMetaProxyResponse": {
				"type": "object",
				"properties": {
					"text": {
						"type": "string"
					},
					"status": {
						"type": "number"
					}
				}
			},
			"MoodCreateResponse": {
				"type": "object",
				"properties": {
					"coverContentUrl": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"author": {
						"type": "object",
						"properties": {
							"powered": {
								"type": "number"
							},
							"newcoinAccTx": {
								"type": "string"
							},
							"newcoinPoolId": {
								"type": "string"
							},
							"aspectRatio": {
								"type": "number"
							},
							"instagram": {
								"type": "string"
							},
							"newcoinActivePublicKey": {
								"type": "string"
							},
							"newcoinPublicKey": {
								"type": "string"
							},
							"powering": {
								"type": "number"
							},
							"lastUpdated": {
								"type": "string"
							},
							"twitter": {
								"type": "string"
							},
							"isAgent": {
								"type": "boolean"
							},
							"newcoinOwnerPublicKey": {
								"type": "string"
							},
							"tiktok": {
								"type": "string"
							},
							"reddit": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"contentType": {
								"type": "string"
							},
							"signal": {
								"type": "string"
							},
							"longitude": {
								"type": "number"
							},
							"coverContentUrl": {
								"type": "string"
							},
							"created": {
								"type": "string"
							},
							"facebookId": {
								"type": "string"
							},
							"verifiedSocialIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolTx": {
								"type": "string"
							},
							"license": {
								"type": "string"
							},
							"discord": {
								"type": "string"
							},
							"updated": {
								"type": "string"
							},
							"newcoinTicker": {
								"type": "string"
							},
							"youtube": {
								"type": "string"
							},
							"lastActive": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"latitude": {
								"type": "number"
							},
							"description": {
								"type": "string"
							},
							"tumblr": {
								"type": "string"
							},
							"medium": {
								"type": "string"
							},
							"soundcloud": {
								"type": "string"
							},
							"snapchat": {
								"type": "string"
							},
							"apple": {
								"type": "string"
							},
							"watts": {
								"type": "number"
							},
							"youtubeId": {
								"type": "string"
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolStake": {
								"type": "number"
							},
							"ethAddress": {
								"type": "string"
							},
							"newcoinPublisherPublicKey": {
								"type": "string"
							},
							"website": {
								"type": "string"
							},
							"spotify": {
								"type": "string"
							},
							"facebook": {
								"type": "string"
							},
							"fullName": {
								"type": "string"
							},
							"telegram": {
								"type": "string"
							},
							"pinterest": {
								"type": "string"
							},
							"label": {
								"type": "string",
								"enum": [
									"user"
								]
							},
							"evm/0x1": {
								"type": "string"
							},
							"contentUrl": {
								"type": "string"
							},
							"deleted": {
								"type": "boolean"
							},
							"blurHash": {
								"type": "string"
							},
							"consentEmail": {
								"type": "string"
							},
							"username": {
								"type": "string"
							}
						}
					},
					"latitude": {
						"type": "number"
					},
					"flags": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"label": {
						"type": "string",
						"enum": [
							"mood"
						]
					},
					"isPrivate": {
						"type": "boolean"
					},
					"title": {
						"type": "string"
					},
					"posts": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"moodId": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"moods": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coverContentUrl": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"author": {
												"type": "object",
												"properties": {
													"powered": {
														"type": "number"
													},
													"newcoinAccTx": {
														"type": "string"
													},
													"newcoinPoolId": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"instagram": {
														"type": "string"
													},
													"newcoinActivePublicKey": {
														"type": "string"
													},
													"newcoinPublicKey": {
														"type": "string"
													},
													"powering": {
														"type": "number"
													},
													"lastUpdated": {
														"type": "string"
													},
													"twitter": {
														"type": "string"
													},
													"isAgent": {
														"type": "boolean"
													},
													"newcoinOwnerPublicKey": {
														"type": "string"
													},
													"tiktok": {
														"type": "string"
													},
													"reddit": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"signal": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													},
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"facebookId": {
														"type": "string"
													},
													"verifiedSocialIds": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolTx": {
														"type": "string"
													},
													"license": {
														"type": "string"
													},
													"discord": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"newcoinTicker": {
														"type": "string"
													},
													"youtube": {
														"type": "string"
													},
													"lastActive": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"latitude": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"tumblr": {
														"type": "string"
													},
													"medium": {
														"type": "string"
													},
													"soundcloud": {
														"type": "string"
													},
													"snapchat": {
														"type": "string"
													},
													"apple": {
														"type": "string"
													},
													"watts": {
														"type": "number"
													},
													"youtubeId": {
														"type": "string"
													},
													"categories": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolStake": {
														"type": "number"
													},
													"ethAddress": {
														"type": "string"
													},
													"newcoinPublisherPublicKey": {
														"type": "string"
													},
													"website": {
														"type": "string"
													},
													"spotify": {
														"type": "string"
													},
													"facebook": {
														"type": "string"
													},
													"fullName": {
														"type": "string"
													},
													"telegram": {
														"type": "string"
													},
													"pinterest": {
														"type": "string"
													},
													"label": {
														"type": "string",
														"enum": [
															"user"
														]
													},
													"evm/0x1": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"consentEmail": {
														"type": "string"
													},
													"username": {
														"type": "string"
													}
												}
											},
											"latitude": {
												"type": "number"
											},
											"flags": {
												"type": "string"
											},
											"description": {
												"type": "string"
											},
											"aspectRatio": {
												"type": "number"
											},
											"label": {
												"type": "string",
												"enum": [
													"mood"
												]
											},
											"isPrivate": {
												"type": "boolean"
											},
											"title": {
												"type": "string"
											},
											"content": {
												"type": "string"
											},
											"stakeToAccess": {
												"type": "number"
											},
											"tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"_rel": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"displayValue": {
																		"type": "string"
																	},
																	"score": {
																		"type": "number"
																	},
																	"polygons": {
																		"type": "string"
																	},
																	"source": {
																		"type": "string"
																	},
																	"category": {
																		"type": "string"
																	}
																}
															}
														},
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"licenseType": {
												"type": "string"
											},
											"contentUrl": {
												"type": "string"
											},
											"deleted": {
												"type": "boolean"
											},
											"defaultView": {
												"type": "string"
											},
											"postsCount": {
												"type": "number"
											},
											"blurHash": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"updated": {
												"type": "string"
											},
											"contentType": {
												"type": "string"
											},
											"longitude": {
												"type": "number"
											}
										}
									}
								},
								"rating": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"post"
									]
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"license": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"newcoinMintTx": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"embed": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"content": {
						"type": "string"
					},
					"stakeToAccess": {
						"type": "number"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"_rel": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"displayValue": {
												"type": "string"
											},
											"score": {
												"type": "number"
											},
											"polygons": {
												"type": "string"
											},
											"source": {
												"type": "string"
											},
											"category": {
												"type": "string"
											}
										}
									}
								},
								"id": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"licenseType": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"defaultView": {
						"type": "string"
					},
					"postsCount": {
						"type": "number"
					},
					"blurHash": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					}
				},
				"description": "MoodCreateResponse Model"
			},
			"MoodReadResponse": {
				"type": "object",
				"properties": {
					"coverContentUrl": {
						"type": "string"
					},
					"created": {
						"type": "string"
					},
					"author": {
						"type": "object",
						"properties": {
							"powered": {
								"type": "number"
							},
							"newcoinAccTx": {
								"type": "string"
							},
							"newcoinPoolId": {
								"type": "string"
							},
							"aspectRatio": {
								"type": "number"
							},
							"instagram": {
								"type": "string"
							},
							"newcoinActivePublicKey": {
								"type": "string"
							},
							"newcoinPublicKey": {
								"type": "string"
							},
							"powering": {
								"type": "number"
							},
							"lastUpdated": {
								"type": "string"
							},
							"twitter": {
								"type": "string"
							},
							"isAgent": {
								"type": "boolean"
							},
							"newcoinOwnerPublicKey": {
								"type": "string"
							},
							"tiktok": {
								"type": "string"
							},
							"reddit": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"contentType": {
								"type": "string"
							},
							"signal": {
								"type": "string"
							},
							"longitude": {
								"type": "number"
							},
							"coverContentUrl": {
								"type": "string"
							},
							"created": {
								"type": "string"
							},
							"facebookId": {
								"type": "string"
							},
							"verifiedSocialIds": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolTx": {
								"type": "string"
							},
							"license": {
								"type": "string"
							},
							"discord": {
								"type": "string"
							},
							"updated": {
								"type": "string"
							},
							"newcoinTicker": {
								"type": "string"
							},
							"youtube": {
								"type": "string"
							},
							"lastActive": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"latitude": {
								"type": "number"
							},
							"description": {
								"type": "string"
							},
							"tumblr": {
								"type": "string"
							},
							"medium": {
								"type": "string"
							},
							"soundcloud": {
								"type": "string"
							},
							"snapchat": {
								"type": "string"
							},
							"apple": {
								"type": "string"
							},
							"watts": {
								"type": "number"
							},
							"youtubeId": {
								"type": "string"
							},
							"categories": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"newcoinPoolStake": {
								"type": "number"
							},
							"ethAddress": {
								"type": "string"
							},
							"newcoinPublisherPublicKey": {
								"type": "string"
							},
							"website": {
								"type": "string"
							},
							"spotify": {
								"type": "string"
							},
							"facebook": {
								"type": "string"
							},
							"fullName": {
								"type": "string"
							},
							"telegram": {
								"type": "string"
							},
							"pinterest": {
								"type": "string"
							},
							"label": {
								"type": "string",
								"enum": [
									"user"
								]
							},
							"evm/0x1": {
								"type": "string"
							},
							"contentUrl": {
								"type": "string"
							},
							"deleted": {
								"type": "boolean"
							},
							"blurHash": {
								"type": "string"
							},
							"consentEmail": {
								"type": "string"
							},
							"username": {
								"type": "string"
							}
						}
					},
					"latitude": {
						"type": "number"
					},
					"flags": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"aspectRatio": {
						"type": "number"
					},
					"label": {
						"type": "string",
						"enum": [
							"mood"
						]
					},
					"isPrivate": {
						"type": "boolean"
					},
					"title": {
						"type": "string"
					},
					"posts": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"moodId": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"moods": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coverContentUrl": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"author": {
												"type": "object",
												"properties": {
													"powered": {
														"type": "number"
													},
													"newcoinAccTx": {
														"type": "string"
													},
													"newcoinPoolId": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"instagram": {
														"type": "string"
													},
													"newcoinActivePublicKey": {
														"type": "string"
													},
													"newcoinPublicKey": {
														"type": "string"
													},
													"powering": {
														"type": "number"
													},
													"lastUpdated": {
														"type": "string"
													},
													"twitter": {
														"type": "string"
													},
													"isAgent": {
														"type": "boolean"
													},
													"newcoinOwnerPublicKey": {
														"type": "string"
													},
													"tiktok": {
														"type": "string"
													},
													"reddit": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"signal": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													},
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"facebookId": {
														"type": "string"
													},
													"verifiedSocialIds": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolTx": {
														"type": "string"
													},
													"license": {
														"type": "string"
													},
													"discord": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"newcoinTicker": {
														"type": "string"
													},
													"youtube": {
														"type": "string"
													},
													"lastActive": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"latitude": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"tumblr": {
														"type": "string"
													},
													"medium": {
														"type": "string"
													},
													"soundcloud": {
														"type": "string"
													},
													"snapchat": {
														"type": "string"
													},
													"apple": {
														"type": "string"
													},
													"watts": {
														"type": "number"
													},
													"youtubeId": {
														"type": "string"
													},
													"categories": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolStake": {
														"type": "number"
													},
													"ethAddress": {
														"type": "string"
													},
													"newcoinPublisherPublicKey": {
														"type": "string"
													},
													"website": {
														"type": "string"
													},
													"spotify": {
														"type": "string"
													},
													"facebook": {
														"type": "string"
													},
													"fullName": {
														"type": "string"
													},
													"telegram": {
														"type": "string"
													},
													"pinterest": {
														"type": "string"
													},
													"label": {
														"type": "string",
														"enum": [
															"user"
														]
													},
													"evm/0x1": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"consentEmail": {
														"type": "string"
													},
													"username": {
														"type": "string"
													}
												}
											},
											"latitude": {
												"type": "number"
											},
											"flags": {
												"type": "string"
											},
											"description": {
												"type": "string"
											},
											"aspectRatio": {
												"type": "number"
											},
											"label": {
												"type": "string",
												"enum": [
													"mood"
												]
											},
											"isPrivate": {
												"type": "boolean"
											},
											"title": {
												"type": "string"
											},
											"content": {
												"type": "string"
											},
											"stakeToAccess": {
												"type": "number"
											},
											"tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"_rel": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"displayValue": {
																		"type": "string"
																	},
																	"score": {
																		"type": "number"
																	},
																	"polygons": {
																		"type": "string"
																	},
																	"source": {
																		"type": "string"
																	},
																	"category": {
																		"type": "string"
																	}
																}
															}
														},
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"licenseType": {
												"type": "string"
											},
											"contentUrl": {
												"type": "string"
											},
											"deleted": {
												"type": "boolean"
											},
											"defaultView": {
												"type": "string"
											},
											"postsCount": {
												"type": "number"
											},
											"blurHash": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"updated": {
												"type": "string"
											},
											"contentType": {
												"type": "string"
											},
											"longitude": {
												"type": "number"
											}
										}
									}
								},
								"rating": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"post"
									]
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"license": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"newcoinMintTx": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"embed": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"content": {
						"type": "string"
					},
					"stakeToAccess": {
						"type": "number"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"_rel": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"displayValue": {
												"type": "string"
											},
											"score": {
												"type": "number"
											},
											"polygons": {
												"type": "string"
											},
											"source": {
												"type": "string"
											},
											"category": {
												"type": "string"
											}
										}
									}
								},
								"id": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"licenseType": {
						"type": "string"
					},
					"contentUrl": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					},
					"defaultView": {
						"type": "string"
					},
					"postsCount": {
						"type": "number"
					},
					"blurHash": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"contentType": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					}
				},
				"description": "MoodReadResponse Model"
			},
			"MoodListAttachedPostsResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"coverContentUrl": {
									"type": "string"
								},
								"moodId": {
									"type": "string"
								},
								"created": {
									"type": "string"
								},
								"author": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"latitude": {
									"type": "number"
								},
								"moods": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"coverContentUrl": {
												"type": "string"
											},
											"created": {
												"type": "string"
											},
											"author": {
												"type": "object",
												"properties": {
													"powered": {
														"type": "number"
													},
													"newcoinAccTx": {
														"type": "string"
													},
													"newcoinPoolId": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"instagram": {
														"type": "string"
													},
													"newcoinActivePublicKey": {
														"type": "string"
													},
													"newcoinPublicKey": {
														"type": "string"
													},
													"powering": {
														"type": "number"
													},
													"lastUpdated": {
														"type": "string"
													},
													"twitter": {
														"type": "string"
													},
													"isAgent": {
														"type": "boolean"
													},
													"newcoinOwnerPublicKey": {
														"type": "string"
													},
													"tiktok": {
														"type": "string"
													},
													"reddit": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"signal": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													},
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"facebookId": {
														"type": "string"
													},
													"verifiedSocialIds": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolTx": {
														"type": "string"
													},
													"license": {
														"type": "string"
													},
													"discord": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"newcoinTicker": {
														"type": "string"
													},
													"youtube": {
														"type": "string"
													},
													"lastActive": {
														"type": "string"
													},
													"displayName": {
														"type": "string"
													},
													"latitude": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"tumblr": {
														"type": "string"
													},
													"medium": {
														"type": "string"
													},
													"soundcloud": {
														"type": "string"
													},
													"snapchat": {
														"type": "string"
													},
													"apple": {
														"type": "string"
													},
													"watts": {
														"type": "number"
													},
													"youtubeId": {
														"type": "string"
													},
													"categories": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"newcoinPoolStake": {
														"type": "number"
													},
													"ethAddress": {
														"type": "string"
													},
													"newcoinPublisherPublicKey": {
														"type": "string"
													},
													"website": {
														"type": "string"
													},
													"spotify": {
														"type": "string"
													},
													"facebook": {
														"type": "string"
													},
													"fullName": {
														"type": "string"
													},
													"telegram": {
														"type": "string"
													},
													"pinterest": {
														"type": "string"
													},
													"label": {
														"type": "string",
														"enum": [
															"user"
														]
													},
													"evm/0x1": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"consentEmail": {
														"type": "string"
													},
													"username": {
														"type": "string"
													}
												}
											},
											"latitude": {
												"type": "number"
											},
											"flags": {
												"type": "string"
											},
											"description": {
												"type": "string"
											},
											"aspectRatio": {
												"type": "number"
											},
											"label": {
												"type": "string",
												"enum": [
													"mood"
												]
											},
											"isPrivate": {
												"type": "boolean"
											},
											"title": {
												"type": "string"
											},
											"content": {
												"type": "string"
											},
											"stakeToAccess": {
												"type": "number"
											},
											"tags": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"_rel": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"displayValue": {
																		"type": "string"
																	},
																	"score": {
																		"type": "number"
																	},
																	"polygons": {
																		"type": "string"
																	},
																	"source": {
																		"type": "string"
																	},
																	"category": {
																		"type": "string"
																	}
																}
															}
														},
														"id": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"licenseType": {
												"type": "string"
											},
											"contentUrl": {
												"type": "string"
											},
											"deleted": {
												"type": "boolean"
											},
											"defaultView": {
												"type": "string"
											},
											"postsCount": {
												"type": "number"
											},
											"blurHash": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"updated": {
												"type": "string"
											},
											"contentType": {
												"type": "string"
											},
											"longitude": {
												"type": "number"
											}
										}
									}
								},
								"rating": {
									"type": "number"
								},
								"description": {
									"type": "string"
								},
								"aspectRatio": {
									"type": "number"
								},
								"label": {
									"type": "string",
									"enum": [
										"post"
									]
								},
								"title": {
									"type": "string"
								},
								"content": {
									"type": "string"
								},
								"tags": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"_rel": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"displayValue": {
															"type": "string"
														},
														"score": {
															"type": "number"
														},
														"polygons": {
															"type": "string"
														},
														"source": {
															"type": "string"
														},
														"category": {
															"type": "string"
														}
													}
												}
											},
											"id": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"license": {
									"type": "string"
								},
								"contentUrl": {
									"type": "string"
								},
								"deleted": {
									"type": "boolean"
								},
								"blurHash": {
									"type": "string"
								},
								"newcoinMintTx": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"embed": {
									"type": "string"
								},
								"updated": {
									"type": "string"
								},
								"contentType": {
									"type": "string"
								},
								"longitude": {
									"type": "number"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				},
				"description": "MoodListAttachedPostsResponse Model"
			},
			"MoodListAttachedResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"oneOf": [
								{
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"coverContentUrl": {
											"type": "string"
										},
										"moodId": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"author": {
											"type": "object",
											"properties": {
												"powered": {
													"type": "number"
												},
												"newcoinAccTx": {
													"type": "string"
												},
												"newcoinPoolId": {
													"type": "string"
												},
												"aspectRatio": {
													"type": "number"
												},
												"instagram": {
													"type": "string"
												},
												"newcoinActivePublicKey": {
													"type": "string"
												},
												"newcoinPublicKey": {
													"type": "string"
												},
												"powering": {
													"type": "number"
												},
												"lastUpdated": {
													"type": "string"
												},
												"twitter": {
													"type": "string"
												},
												"isAgent": {
													"type": "boolean"
												},
												"newcoinOwnerPublicKey": {
													"type": "string"
												},
												"tiktok": {
													"type": "string"
												},
												"reddit": {
													"type": "string"
												},
												"id": {
													"type": "string"
												},
												"contentType": {
													"type": "string"
												},
												"signal": {
													"type": "string"
												},
												"longitude": {
													"type": "number"
												},
												"coverContentUrl": {
													"type": "string"
												},
												"created": {
													"type": "string"
												},
												"facebookId": {
													"type": "string"
												},
												"verifiedSocialIds": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"newcoinPoolTx": {
													"type": "string"
												},
												"license": {
													"type": "string"
												},
												"discord": {
													"type": "string"
												},
												"updated": {
													"type": "string"
												},
												"newcoinTicker": {
													"type": "string"
												},
												"youtube": {
													"type": "string"
												},
												"lastActive": {
													"type": "string"
												},
												"displayName": {
													"type": "string"
												},
												"latitude": {
													"type": "number"
												},
												"description": {
													"type": "string"
												},
												"tumblr": {
													"type": "string"
												},
												"medium": {
													"type": "string"
												},
												"soundcloud": {
													"type": "string"
												},
												"snapchat": {
													"type": "string"
												},
												"apple": {
													"type": "string"
												},
												"watts": {
													"type": "number"
												},
												"youtubeId": {
													"type": "string"
												},
												"categories": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"newcoinPoolStake": {
													"type": "number"
												},
												"ethAddress": {
													"type": "string"
												},
												"newcoinPublisherPublicKey": {
													"type": "string"
												},
												"website": {
													"type": "string"
												},
												"spotify": {
													"type": "string"
												},
												"facebook": {
													"type": "string"
												},
												"fullName": {
													"type": "string"
												},
												"telegram": {
													"type": "string"
												},
												"pinterest": {
													"type": "string"
												},
												"label": {
													"type": "string",
													"enum": [
														"user"
													]
												},
												"evm/0x1": {
													"type": "string"
												},
												"contentUrl": {
													"type": "string"
												},
												"deleted": {
													"type": "boolean"
												},
												"blurHash": {
													"type": "string"
												},
												"consentEmail": {
													"type": "string"
												},
												"username": {
													"type": "string"
												}
											}
										},
										"latitude": {
											"type": "number"
										},
										"moods": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"coverContentUrl": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"author": {
														"type": "object",
														"properties": {
															"powered": {
																"type": "number"
															},
															"newcoinAccTx": {
																"type": "string"
															},
															"newcoinPoolId": {
																"type": "string"
															},
															"aspectRatio": {
																"type": "number"
															},
															"instagram": {
																"type": "string"
															},
															"newcoinActivePublicKey": {
																"type": "string"
															},
															"newcoinPublicKey": {
																"type": "string"
															},
															"powering": {
																"type": "number"
															},
															"lastUpdated": {
																"type": "string"
															},
															"twitter": {
																"type": "string"
															},
															"isAgent": {
																"type": "boolean"
															},
															"newcoinOwnerPublicKey": {
																"type": "string"
															},
															"tiktok": {
																"type": "string"
															},
															"reddit": {
																"type": "string"
															},
															"id": {
																"type": "string"
															},
															"contentType": {
																"type": "string"
															},
															"signal": {
																"type": "string"
															},
															"longitude": {
																"type": "number"
															},
															"coverContentUrl": {
																"type": "string"
															},
															"created": {
																"type": "string"
															},
															"facebookId": {
																"type": "string"
															},
															"verifiedSocialIds": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"newcoinPoolTx": {
																"type": "string"
															},
															"license": {
																"type": "string"
															},
															"discord": {
																"type": "string"
															},
															"updated": {
																"type": "string"
															},
															"newcoinTicker": {
																"type": "string"
															},
															"youtube": {
																"type": "string"
															},
															"lastActive": {
																"type": "string"
															},
															"displayName": {
																"type": "string"
															},
															"latitude": {
																"type": "number"
															},
															"description": {
																"type": "string"
															},
															"tumblr": {
																"type": "string"
															},
															"medium": {
																"type": "string"
															},
															"soundcloud": {
																"type": "string"
															},
															"snapchat": {
																"type": "string"
															},
															"apple": {
																"type": "string"
															},
															"watts": {
																"type": "number"
															},
															"youtubeId": {
																"type": "string"
															},
															"categories": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"newcoinPoolStake": {
																"type": "number"
															},
															"ethAddress": {
																"type": "string"
															},
															"newcoinPublisherPublicKey": {
																"type": "string"
															},
															"website": {
																"type": "string"
															},
															"spotify": {
																"type": "string"
															},
															"facebook": {
																"type": "string"
															},
															"fullName": {
																"type": "string"
															},
															"telegram": {
																"type": "string"
															},
															"pinterest": {
																"type": "string"
															},
															"label": {
																"type": "string",
																"enum": [
																	"user"
																]
															},
															"evm/0x1": {
																"type": "string"
															},
															"contentUrl": {
																"type": "string"
															},
															"deleted": {
																"type": "boolean"
															},
															"blurHash": {
																"type": "string"
															},
															"consentEmail": {
																"type": "string"
															},
															"username": {
																"type": "string"
															}
														}
													},
													"latitude": {
														"type": "number"
													},
													"flags": {
														"type": "string"
													},
													"description": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"label": {
														"type": "string",
														"enum": [
															"mood"
														]
													},
													"isPrivate": {
														"type": "boolean"
													},
													"title": {
														"type": "string"
													},
													"content": {
														"type": "string"
													},
													"stakeToAccess": {
														"type": "number"
													},
													"tags": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"_rel": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"displayValue": {
																				"type": "string"
																			},
																			"score": {
																				"type": "number"
																			},
																			"polygons": {
																				"type": "string"
																			},
																			"source": {
																				"type": "string"
																			},
																			"category": {
																				"type": "string"
																			}
																		}
																	}
																},
																"id": {
																	"type": "string"
																},
																"value": {
																	"type": "string"
																}
															}
														}
													},
													"licenseType": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"defaultView": {
														"type": "string"
													},
													"postsCount": {
														"type": "number"
													},
													"blurHash": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													}
												}
											}
										},
										"rating": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"label": {
											"type": "string",
											"enum": [
												"post"
											]
										},
										"title": {
											"type": "string"
										},
										"content": {
											"type": "string"
										},
										"tags": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"_rel": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"displayValue": {
																	"type": "string"
																},
																"score": {
																	"type": "number"
																},
																"polygons": {
																	"type": "string"
																},
																"source": {
																	"type": "string"
																},
																"category": {
																	"type": "string"
																}
															}
														}
													},
													"id": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										},
										"license": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"newcoinMintTx": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"embed": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										}
									}
								},
								{
									"type": "object",
									"properties": {
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"author": {
											"type": "object",
											"properties": {
												"powered": {
													"type": "number"
												},
												"newcoinAccTx": {
													"type": "string"
												},
												"newcoinPoolId": {
													"type": "string"
												},
												"aspectRatio": {
													"type": "number"
												},
												"instagram": {
													"type": "string"
												},
												"newcoinActivePublicKey": {
													"type": "string"
												},
												"newcoinPublicKey": {
													"type": "string"
												},
												"powering": {
													"type": "number"
												},
												"lastUpdated": {
													"type": "string"
												},
												"twitter": {
													"type": "string"
												},
												"isAgent": {
													"type": "boolean"
												},
												"newcoinOwnerPublicKey": {
													"type": "string"
												},
												"tiktok": {
													"type": "string"
												},
												"reddit": {
													"type": "string"
												},
												"id": {
													"type": "string"
												},
												"contentType": {
													"type": "string"
												},
												"signal": {
													"type": "string"
												},
												"longitude": {
													"type": "number"
												},
												"coverContentUrl": {
													"type": "string"
												},
												"created": {
													"type": "string"
												},
												"facebookId": {
													"type": "string"
												},
												"verifiedSocialIds": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"newcoinPoolTx": {
													"type": "string"
												},
												"license": {
													"type": "string"
												},
												"discord": {
													"type": "string"
												},
												"updated": {
													"type": "string"
												},
												"newcoinTicker": {
													"type": "string"
												},
												"youtube": {
													"type": "string"
												},
												"lastActive": {
													"type": "string"
												},
												"displayName": {
													"type": "string"
												},
												"latitude": {
													"type": "number"
												},
												"description": {
													"type": "string"
												},
												"tumblr": {
													"type": "string"
												},
												"medium": {
													"type": "string"
												},
												"soundcloud": {
													"type": "string"
												},
												"snapchat": {
													"type": "string"
												},
												"apple": {
													"type": "string"
												},
												"watts": {
													"type": "number"
												},
												"youtubeId": {
													"type": "string"
												},
												"categories": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"newcoinPoolStake": {
													"type": "number"
												},
												"ethAddress": {
													"type": "string"
												},
												"newcoinPublisherPublicKey": {
													"type": "string"
												},
												"website": {
													"type": "string"
												},
												"spotify": {
													"type": "string"
												},
												"facebook": {
													"type": "string"
												},
												"fullName": {
													"type": "string"
												},
												"telegram": {
													"type": "string"
												},
												"pinterest": {
													"type": "string"
												},
												"label": {
													"type": "string",
													"enum": [
														"user"
													]
												},
												"evm/0x1": {
													"type": "string"
												},
												"contentUrl": {
													"type": "string"
												},
												"deleted": {
													"type": "boolean"
												},
												"blurHash": {
													"type": "string"
												},
												"consentEmail": {
													"type": "string"
												},
												"username": {
													"type": "string"
												}
											}
										},
										"latitude": {
											"type": "number"
										},
										"flags": {
											"type": "string"
										},
										"description": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"label": {
											"type": "string",
											"enum": [
												"mood"
											]
										},
										"isPrivate": {
											"type": "boolean"
										},
										"title": {
											"type": "string"
										},
										"posts": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"coverContentUrl": {
														"type": "string"
													},
													"moodId": {
														"type": "string"
													},
													"created": {
														"type": "string"
													},
													"author": {
														"type": "object",
														"properties": {
															"powered": {
																"type": "number"
															},
															"newcoinAccTx": {
																"type": "string"
															},
															"newcoinPoolId": {
																"type": "string"
															},
															"aspectRatio": {
																"type": "number"
															},
															"instagram": {
																"type": "string"
															},
															"newcoinActivePublicKey": {
																"type": "string"
															},
															"newcoinPublicKey": {
																"type": "string"
															},
															"powering": {
																"type": "number"
															},
															"lastUpdated": {
																"type": "string"
															},
															"twitter": {
																"type": "string"
															},
															"isAgent": {
																"type": "boolean"
															},
															"newcoinOwnerPublicKey": {
																"type": "string"
															},
															"tiktok": {
																"type": "string"
															},
															"reddit": {
																"type": "string"
															},
															"id": {
																"type": "string"
															},
															"contentType": {
																"type": "string"
															},
															"signal": {
																"type": "string"
															},
															"longitude": {
																"type": "number"
															},
															"coverContentUrl": {
																"type": "string"
															},
															"created": {
																"type": "string"
															},
															"facebookId": {
																"type": "string"
															},
															"verifiedSocialIds": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"newcoinPoolTx": {
																"type": "string"
															},
															"license": {
																"type": "string"
															},
															"discord": {
																"type": "string"
															},
															"updated": {
																"type": "string"
															},
															"newcoinTicker": {
																"type": "string"
															},
															"youtube": {
																"type": "string"
															},
															"lastActive": {
																"type": "string"
															},
															"displayName": {
																"type": "string"
															},
															"latitude": {
																"type": "number"
															},
															"description": {
																"type": "string"
															},
															"tumblr": {
																"type": "string"
															},
															"medium": {
																"type": "string"
															},
															"soundcloud": {
																"type": "string"
															},
															"snapchat": {
																"type": "string"
															},
															"apple": {
																"type": "string"
															},
															"watts": {
																"type": "number"
															},
															"youtubeId": {
																"type": "string"
															},
															"categories": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"newcoinPoolStake": {
																"type": "number"
															},
															"ethAddress": {
																"type": "string"
															},
															"newcoinPublisherPublicKey": {
																"type": "string"
															},
															"website": {
																"type": "string"
															},
															"spotify": {
																"type": "string"
															},
															"facebook": {
																"type": "string"
															},
															"fullName": {
																"type": "string"
															},
															"telegram": {
																"type": "string"
															},
															"pinterest": {
																"type": "string"
															},
															"label": {
																"type": "string",
																"enum": [
																	"user"
																]
															},
															"evm/0x1": {
																"type": "string"
															},
															"contentUrl": {
																"type": "string"
															},
															"deleted": {
																"type": "boolean"
															},
															"blurHash": {
																"type": "string"
															},
															"consentEmail": {
																"type": "string"
															},
															"username": {
																"type": "string"
															}
														}
													},
													"latitude": {
														"type": "number"
													},
													"moods": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"coverContentUrl": {
																	"type": "string"
																},
																"created": {
																	"type": "string"
																},
																"author": {
																	"type": "object",
																	"properties": {
																		"powered": {
																			"type": "number"
																		},
																		"newcoinAccTx": {
																			"type": "string"
																		},
																		"newcoinPoolId": {
																			"type": "string"
																		},
																		"aspectRatio": {
																			"type": "number"
																		},
																		"instagram": {
																			"type": "string"
																		},
																		"newcoinActivePublicKey": {
																			"type": "string"
																		},
																		"newcoinPublicKey": {
																			"type": "string"
																		},
																		"powering": {
																			"type": "number"
																		},
																		"lastUpdated": {
																			"type": "string"
																		},
																		"twitter": {
																			"type": "string"
																		},
																		"isAgent": {
																			"type": "boolean"
																		},
																		"newcoinOwnerPublicKey": {
																			"type": "string"
																		},
																		"tiktok": {
																			"type": "string"
																		},
																		"reddit": {
																			"type": "string"
																		},
																		"id": {
																			"type": "string"
																		},
																		"contentType": {
																			"type": "string"
																		},
																		"signal": {
																			"type": "string"
																		},
																		"longitude": {
																			"type": "number"
																		},
																		"coverContentUrl": {
																			"type": "string"
																		},
																		"created": {
																			"type": "string"
																		},
																		"facebookId": {
																			"type": "string"
																		},
																		"verifiedSocialIds": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			}
																		},
																		"newcoinPoolTx": {
																			"type": "string"
																		},
																		"license": {
																			"type": "string"
																		},
																		"discord": {
																			"type": "string"
																		},
																		"updated": {
																			"type": "string"
																		},
																		"newcoinTicker": {
																			"type": "string"
																		},
																		"youtube": {
																			"type": "string"
																		},
																		"lastActive": {
																			"type": "string"
																		},
																		"displayName": {
																			"type": "string"
																		},
																		"latitude": {
																			"type": "number"
																		},
																		"description": {
																			"type": "string"
																		},
																		"tumblr": {
																			"type": "string"
																		},
																		"medium": {
																			"type": "string"
																		},
																		"soundcloud": {
																			"type": "string"
																		},
																		"snapchat": {
																			"type": "string"
																		},
																		"apple": {
																			"type": "string"
																		},
																		"watts": {
																			"type": "number"
																		},
																		"youtubeId": {
																			"type": "string"
																		},
																		"categories": {
																			"type": "array",
																			"items": {
																				"type": "string"
																			}
																		},
																		"newcoinPoolStake": {
																			"type": "number"
																		},
																		"ethAddress": {
																			"type": "string"
																		},
																		"newcoinPublisherPublicKey": {
																			"type": "string"
																		},
																		"website": {
																			"type": "string"
																		},
																		"spotify": {
																			"type": "string"
																		},
																		"facebook": {
																			"type": "string"
																		},
																		"fullName": {
																			"type": "string"
																		},
																		"telegram": {
																			"type": "string"
																		},
																		"pinterest": {
																			"type": "string"
																		},
																		"label": {
																			"type": "string",
																			"enum": [
																				"user"
																			]
																		},
																		"evm/0x1": {
																			"type": "string"
																		},
																		"contentUrl": {
																			"type": "string"
																		},
																		"deleted": {
																			"type": "boolean"
																		},
																		"blurHash": {
																			"type": "string"
																		},
																		"consentEmail": {
																			"type": "string"
																		},
																		"username": {
																			"type": "string"
																		}
																	}
																},
																"latitude": {
																	"type": "number"
																},
																"flags": {
																	"type": "string"
																},
																"description": {
																	"type": "string"
																},
																"aspectRatio": {
																	"type": "number"
																},
																"label": {
																	"type": "string",
																	"enum": [
																		"mood"
																	]
																},
																"isPrivate": {
																	"type": "boolean"
																},
																"title": {
																	"type": "string"
																},
																"content": {
																	"type": "string"
																},
																"stakeToAccess": {
																	"type": "number"
																},
																"tags": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"_rel": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"displayValue": {
																							"type": "string"
																						},
																						"score": {
																							"type": "number"
																						},
																						"polygons": {
																							"type": "string"
																						},
																						"source": {
																							"type": "string"
																						},
																						"category": {
																							"type": "string"
																						}
																					}
																				}
																			},
																			"id": {
																				"type": "string"
																			},
																			"value": {
																				"type": "string"
																			}
																		}
																	}
																},
																"licenseType": {
																	"type": "string"
																},
																"contentUrl": {
																	"type": "string"
																},
																"deleted": {
																	"type": "boolean"
																},
																"defaultView": {
																	"type": "string"
																},
																"postsCount": {
																	"type": "number"
																},
																"blurHash": {
																	"type": "string"
																},
																"id": {
																	"type": "string"
																},
																"updated": {
																	"type": "string"
																},
																"contentType": {
																	"type": "string"
																},
																"longitude": {
																	"type": "number"
																}
															}
														}
													},
													"rating": {
														"type": "number"
													},
													"description": {
														"type": "string"
													},
													"aspectRatio": {
														"type": "number"
													},
													"label": {
														"type": "string",
														"enum": [
															"post"
														]
													},
													"title": {
														"type": "string"
													},
													"content": {
														"type": "string"
													},
													"tags": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"_rel": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"displayValue": {
																				"type": "string"
																			},
																			"score": {
																				"type": "number"
																			},
																			"polygons": {
																				"type": "string"
																			},
																			"source": {
																				"type": "string"
																			},
																			"category": {
																				"type": "string"
																			}
																		}
																	}
																},
																"id": {
																	"type": "string"
																},
																"value": {
																	"type": "string"
																}
															}
														}
													},
													"license": {
														"type": "string"
													},
													"contentUrl": {
														"type": "string"
													},
													"deleted": {
														"type": "boolean"
													},
													"blurHash": {
														"type": "string"
													},
													"newcoinMintTx": {
														"type": "string"
													},
													"id": {
														"type": "string"
													},
													"embed": {
														"type": "string"
													},
													"updated": {
														"type": "string"
													},
													"contentType": {
														"type": "string"
													},
													"longitude": {
														"type": "number"
													}
												}
											}
										},
										"content": {
											"type": "string"
										},
										"stakeToAccess": {
											"type": "number"
										},
										"tags": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"_rel": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"displayValue": {
																	"type": "string"
																},
																"score": {
																	"type": "number"
																},
																"polygons": {
																	"type": "string"
																},
																"source": {
																	"type": "string"
																},
																"category": {
																	"type": "string"
																}
															}
														}
													},
													"id": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										},
										"licenseType": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"defaultView": {
											"type": "string"
										},
										"postsCount": {
											"type": "number"
										},
										"blurHash": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										}
									}
								}
							]
						}
					},
					"done": {
						"type": "boolean"
					}
				},
				"description": "MoodListAttachedResponse Model"
			},
			"MoodCreateRequest": {
				"type": "object",
				"properties": {
					"licenseType": {
						"type": "string"
					},
					"defaultView": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"isPrivate": {
						"type": "boolean"
					},
					"title": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					},
					"tags": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				"description": "MoodCreateRequest Model"
			},
			"MoodUpdateRequest": {
				"required": [
					"id"
				],
				"type": "object",
				"properties": {
					"licenseType": {
						"type": "string"
					},
					"latitude": {
						"type": "number"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"longitude": {
						"type": "number"
					}
				},
				"description": "MoodUpdateRequest Model",
				"anyOf": [
					{
						"required": [
							"title"
						],
						"type": "object",
						"properties": {
							"title": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"description"
						],
						"type": "object",
						"properties": {
							"description": {
								"type": "string"
							}
						}
					},
					{
						"required": [
							"longitude"
						],
						"type": "object",
						"properties": {
							"longitude": {
								"type": "number"
							}
						}
					},
					{
						"required": [
							"latitude"
						],
						"type": "object",
						"properties": {
							"latitude": {
								"type": "number"
							}
						}
					}
				]
			},
			"EntityAttachRequest": {
				"required": [
					"id",
					"targetId"
				],
				"type": "object",
				"properties": {
					"targetId": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"description": "EntityAttachRequest Model"
			},
			"MoodGrantAccessRequest": {
				"type": "object",
				"properties": {
					"targetId": {
						"type": "string"
					},
					"grantee": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"username": {
								"type": "string"
							}
						}
					},
					"policy": {
						"type": "object",
						"properties": {
							"level": {
								"type": "string"
							}
						}
					}
				},
				"description": "MoodGrantAccessRequest Model"
			},
			"MoodGrantAccessResponse": {
				"type": "object",
				"properties": {
					"level": {
						"type": "string"
					},
					"grantor": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					}
				},
				"description": "MoodGrantAccessResponse Model"
			},
			"MoodListGranteesResponse": {
				"type": "object",
				"properties": {
					"value": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"level": {
									"type": "string"
								},
								"grantee": {
									"type": "object",
									"properties": {
										"powered": {
											"type": "number"
										},
										"newcoinAccTx": {
											"type": "string"
										},
										"newcoinPoolId": {
											"type": "string"
										},
										"aspectRatio": {
											"type": "number"
										},
										"instagram": {
											"type": "string"
										},
										"newcoinActivePublicKey": {
											"type": "string"
										},
										"newcoinPublicKey": {
											"type": "string"
										},
										"powering": {
											"type": "number"
										},
										"lastUpdated": {
											"type": "string"
										},
										"twitter": {
											"type": "string"
										},
										"isAgent": {
											"type": "boolean"
										},
										"newcoinOwnerPublicKey": {
											"type": "string"
										},
										"tiktok": {
											"type": "string"
										},
										"reddit": {
											"type": "string"
										},
										"id": {
											"type": "string"
										},
										"contentType": {
											"type": "string"
										},
										"signal": {
											"type": "string"
										},
										"longitude": {
											"type": "number"
										},
										"coverContentUrl": {
											"type": "string"
										},
										"created": {
											"type": "string"
										},
										"facebookId": {
											"type": "string"
										},
										"verifiedSocialIds": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolTx": {
											"type": "string"
										},
										"license": {
											"type": "string"
										},
										"discord": {
											"type": "string"
										},
										"updated": {
											"type": "string"
										},
										"newcoinTicker": {
											"type": "string"
										},
										"youtube": {
											"type": "string"
										},
										"lastActive": {
											"type": "string"
										},
										"displayName": {
											"type": "string"
										},
										"latitude": {
											"type": "number"
										},
										"description": {
											"type": "string"
										},
										"tumblr": {
											"type": "string"
										},
										"medium": {
											"type": "string"
										},
										"soundcloud": {
											"type": "string"
										},
										"snapchat": {
											"type": "string"
										},
										"apple": {
											"type": "string"
										},
										"watts": {
											"type": "number"
										},
										"youtubeId": {
											"type": "string"
										},
										"categories": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"newcoinPoolStake": {
											"type": "number"
										},
										"ethAddress": {
											"type": "string"
										},
										"newcoinPublisherPublicKey": {
											"type": "string"
										},
										"website": {
											"type": "string"
										},
										"spotify": {
											"type": "string"
										},
										"facebook": {
											"type": "string"
										},
										"fullName": {
											"type": "string"
										},
										"telegram": {
											"type": "string"
										},
										"pinterest": {
											"type": "string"
										},
										"label": {
											"type": "string",
											"enum": [
												"user"
											]
										},
										"evm/0x1": {
											"type": "string"
										},
										"contentUrl": {
											"type": "string"
										},
										"deleted": {
											"type": "boolean"
										},
										"blurHash": {
											"type": "string"
										},
										"consentEmail": {
											"type": "string"
										},
										"username": {
											"type": "string"
										}
									}
								},
								"updated": {
									"type": "string"
								}
							}
						}
					},
					"done": {
						"type": "boolean"
					}
				},
				"description": "MoodListGranteesResponse Model"
			},
			"CreativeSearchResponse": {
				"type": "object",
				"properties": {
					"hits": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"_source": {
									"type": "object",
									"properties": {
										"image": {
											"type": "string"
										},
										"meta": {
											"type": "object",
											"properties": {
												"date": {
													"type": "string"
												},
												"summary": {
													"type": "string"
												},
												"id": {
													"type": "integer"
												},
												"blog_name": {
													"type": "string"
												},
												"tags": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"short_url": {
													"type": "string"
												}
											}
										},
										"aesthetics": {
											"type": "object"
										},
										"content": {
											"type": "object"
										}
									}
								},
								"_id": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"PaymentStripePaymentIntentCreateRequest": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"productId": {
									"type": "string"
								},
								"priceId": {
									"type": "string"
								}
							}
						}
					},
					"username": {
						"type": "string"
					}
				}
			},
			"PaymentStripeWebhookRequest": {
				"type": "object",
				"properties": {
					"request": {
						"type": "object"
					},
					"livemode": {
						"type": "boolean"
					},
					"data": {
						"type": "object",
						"properties": {
							"object": {
								"type": "object",
								"properties": {}
							}
						}
					},
					"created": {
						"type": "integer"
					},
					"id": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"api_version": {
						"type": "string"
					},
					"pending_webhooks": {
						"type": "integer"
					},
					"object": {
						"type": "string"
					}
				}
			},
			"PaymentStripePaymentIntentCreateResponse": {
				"type": "object",
				"properties": {
					"client_secret": {
						"type": "string"
					}
				}
			},
			"StripeCheckoutSessionCreateRequest": {
				"type": "object",
				"properties": {
					"priceId": {
						"type": "string"
					}
				}
			},
			"StripeCheckoutSessionCreateResponse": {
				"type": "object",
				"properties": {
					"subscriptionStatus": {
						"type": "string"
					},
					"url": {
						"type": "string"
					}
				}
			},
			"InstagramVerificationRequest": {
				"type": "object",
				"properties": {}
			},
			"InstagramVerificationResponse": {
				"type": "object",
				"properties": {
					"isVerified": {
						"type": "boolean"
					},
					"success": {
						"type": "boolean"
					}
				}
			},
			"EvmVerificationRequest": {
				"type": "object",
				"properties": {
					"payload": {
						"type": "object",
						"properties": {
							"chain": {
								"type": "string"
							},
							"address": {
								"type": "string"
							},
							"wallet": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"username": {
								"type": "string"
							}
						}
					},
					"signature": {
						"type": "string"
					}
				}
			},
			"SessionTokenResponse": {
				"type": "object",
				"properties": {
					"jwt": {
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {
			"newgraph-api-eu-prod": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header",
				"x-amazon-apigateway-authtype": "custom"
			},
			"lambdaAuthorizer": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header",
				"x-amazon-apigateway-authtype": "custom"
			}
		}
	},
	"x-amazon-apigateway-minimum-compression-size": 1024
}